#import * from "./generated/prisma.graphql"

type SuccessMessage {
  message: String
}

type Mutation {
  createQuestion(
    title: String!
    description: String
    tags: [TagInput!]!
    approval: Boolean
  ): Question!
  deleteBookMark(id: ID!): BookMark
  deleteAnswer(id: ID!): Answer
  deleteAnswerVote(id: ID!): AnswerVote
  deleteQuestion(id: ID!): Question
  createBookMark(questionId: ID!): BookMark!
  createAnswer(body: String!, questionId: ID!, approval: Boolean): Answer!
  createTag(name: String!): Tag!
  signup(
    email: String!
    password: String!
    name: String!
    display: String!
  ): User!
  signin(email: String!, password: String!): User!
  facebookLogin(email: String!, name: String!): User!
  googleLogin(email: String!, name: String!): User!
  linkedinLogin(code: String!): User!
  signout: SuccessMessage
  requestReset(email: String!): SuccessMessage
  resetPassword(
    resetToken: String!
    password: String!
    confirmPassword: String!
  ): User!
  updateAnswer(id: ID!, body: String, approval: Boolean): Answer!
  selectAnswer(id: ID!): Answer!
  createQuestionView(questionId: ID!): Boolean
  createQuestionVote(questionId: ID!, vote: String): Boolean
  createAnswerVote(answerId: ID!, vote: String): AnswerVote
  updateUser(
    id: ID!
    email: String!
    name: String!
    display: String!
    image: String
    location: String
    about: String
    tags: [TagInput!]
    industry: String
  ): User!
  updateQuestion(
    id: ID!
    title: String
    description: String
    approval: Boolean
    tags: [TagInput!]
  ): Question!
  updatePermissions(permissions: [Permission], userId: ID!): User
  createBusinessIdea(
    idea: String!
    problem: String
    solution: String
    customer: String
    value: String
  ): BusinessIdea!
  deleteBusinessIdea(id: ID!): BusinessIdea
  updateBusinessIdea(
    id: ID!
    idea: String!
    problem: String
    solution: String
    customer: String
    value: String
  ): BusinessIdea!
}

type Query {
  me: User
  user(id: ID!): User
  users: [User]!
  tags(
    first: Int
    where: TagWhereInput
    orderBy: TagOrderByInput
    filter: String
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Tag!]!
  tag(id: ID!): Tag
  questions(
    where: QuestionWhereInput
    orderBy: QuestionOrderByInput
    filter: String
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Question]!
  businessIdeas(
    where: BusinessIdeaWhereInput
    orderBy: BusinessIdeaOrderByInput
    filter: String
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [BusinessIdea]!
  answers(
    where: AnswerWhereInput
    orderBy: AnswerOrderByInput
    filter: String!
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Answer]!
  questionsConnection(
    where: QuestionWhereInput
    orderBy: QuestionOrderByInput
    filter: String
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): QuestionConnection!
  answersConnection(
    where: AnswerWhereInput
    orderBy: AnswerOrderByInput
    filter: String
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): AnswerConnection!
  bookMark(id: ID!): BookMark
  question(id: ID!): Question
  businessIdea(id: ID!): BusinessIdea
  answer(id: ID!): Answer
  answerVote(where: AnswerVoteWhereUniqueInput!): AnswerVote
  searchQuestions(
    where: QuestionWhereInput
    limit: Int
    offset: Int
    noDuplicates: Boolean
  ): [Question]!
}

input TagInput {
  name: String
}

type User {
  id: ID!
  name: String!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  display: String!
  image: String
  location: String
  about: String
  industry: String
  permissions: [Permission!]!
  myQuestions: [Question!]!
  myAnswers: [Answer!]!
  badges: Badges
  myBookMarks: [BookMark!]
  tags(
    where: TagWhereInput
    orderBy: TagOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Tag!]
  businessIdeas: [BusinessIdea!]!
}

type Badges {
  autobiographer: Boolean
  critic: Boolean
  patron: Boolean
  reviewer: Boolean
  analyst: Boolean
  commentor: Boolean
  frequentFlyer: Boolean
  niceAnswer: Boolean
  expert: Boolean
  teacher: Boolean
  pundit: Boolean
  powerVoter: Boolean
  provoker: Boolean
}

type Answer {
  id: ID!
  body: String!
  answeredBy: User!
  approval: Boolean
  selected: Boolean
  answeredTo(
    where: AnswerWhereInput
    orderBy: AnswerOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Question!]
  createdAt: DateTime!
  updatedAt: DateTime!
  upVotes: Int
  downVotes: Int
  answerVote: [AnswerVote]
}

type Question implements Node {
  id: ID!
  tags(
    where: TagWhereInput
    orderBy: TagOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Tag!]
  title: String!
  description: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  approval: Boolean
  askedBy(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User!]
  answers(
    where: AnswerWhereInput
    orderBy: AnswerOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Answer!]
  views: Int
  upVotes: Int
  downVotes: Int
  questionVote: [QuestionVote]
  bookMark: [BookMark]
  searchTermFoundIn: String
}

type BookMark implements Node {
  id: ID!
  questions(
    where: QuestionWhereInput
    orderBy: QuestionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Question!]
  markedBy: User!
}

type BusinessIdea implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: User!
  idea: String!
  problem: String
  solution: String
  customer: String
  value: String
}

type Tag {
  id: ID!
  name: String!
}
