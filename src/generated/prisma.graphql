# source: http://localhost:4466
# timestamp: Tue Sep 03 2019 14:05:53 GMT-0700 (PDT)

type AggregateAnswer {
  count: Int!
}

type AggregateAnswerVote {
  count: Int!
}

type AggregateBlocks {
  count: Int!
}

type AggregateBlog {
  count: Int!
}

type AggregateBookMark {
  count: Int!
}

type AggregateQuestion {
  count: Int!
}

type AggregateQuestionView {
  count: Int!
}

type AggregateQuestionVote {
  count: Int!
}

type AggregateTag {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Answer implements Node {
  id: ID!
  body: String!
  answeredBy: User!
  answeredTo(
    where: QuestionWhereInput
    orderBy: QuestionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Question!]
  approval: Boolean
  selected: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
  answerVote(
    where: AnswerVoteWhereInput
    orderBy: AnswerVoteOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [AnswerVote!]
}

"""
A connection to a list of items.
"""
type AnswerConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [AnswerEdge]!
  aggregate: AggregateAnswer!
}

input AnswerCreateInput {
  id: ID
  body: String!
  approval: Boolean
  selected: Boolean
  answeredBy: UserCreateOneWithoutMyAnswersInput!
  answeredTo: QuestionCreateManyWithoutAnswersInput
  answerVote: AnswerVoteCreateManyWithoutVotedAnswerInput
}

input AnswerCreateManyWithoutAnsweredByInput {
  create: [AnswerCreateWithoutAnsweredByInput!]
  connect: [AnswerWhereUniqueInput!]
}

input AnswerCreateManyWithoutAnsweredToInput {
  create: [AnswerCreateWithoutAnsweredToInput!]
  connect: [AnswerWhereUniqueInput!]
}

input AnswerCreateOneWithoutAnswerVoteInput {
  create: AnswerCreateWithoutAnswerVoteInput
  connect: AnswerWhereUniqueInput
}

input AnswerCreateWithoutAnsweredByInput {
  id: ID
  body: String!
  approval: Boolean
  selected: Boolean
  answeredTo: QuestionCreateManyWithoutAnswersInput
  answerVote: AnswerVoteCreateManyWithoutVotedAnswerInput
}

input AnswerCreateWithoutAnsweredToInput {
  id: ID
  body: String!
  approval: Boolean
  selected: Boolean
  answeredBy: UserCreateOneWithoutMyAnswersInput!
  answerVote: AnswerVoteCreateManyWithoutVotedAnswerInput
}

input AnswerCreateWithoutAnswerVoteInput {
  id: ID
  body: String!
  approval: Boolean
  selected: Boolean
  answeredBy: UserCreateOneWithoutMyAnswersInput!
  answeredTo: QuestionCreateManyWithoutAnswersInput
}

"""
An edge in a connection.
"""
type AnswerEdge {
  """
  The item at the end of the edge.
  """
  node: Answer!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum AnswerOrderByInput {
  id_ASC
  id_DESC
  body_ASC
  body_DESC
  approval_ASC
  approval_DESC
  selected_ASC
  selected_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AnswerPreviousValues {
  id: ID!
  body: String!
  approval: Boolean
  selected: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

input AnswerScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [AnswerScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [AnswerScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [AnswerScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  body: String

  """
  All values that are not equal to given value.
  """
  body_not: String

  """
  All values that are contained in given list.
  """
  body_in: [String!]

  """
  All values that are not contained in given list.
  """
  body_not_in: [String!]

  """
  All values less than the given value.
  """
  body_lt: String

  """
  All values less than or equal the given value.
  """
  body_lte: String

  """
  All values greater than the given value.
  """
  body_gt: String

  """
  All values greater than or equal the given value.
  """
  body_gte: String

  """
  All values containing the given string.
  """
  body_contains: String

  """
  All values not containing the given string.
  """
  body_not_contains: String

  """
  All values starting with the given string.
  """
  body_starts_with: String

  """
  All values not starting with the given string.
  """
  body_not_starts_with: String

  """
  All values ending with the given string.
  """
  body_ends_with: String

  """
  All values not ending with the given string.
  """
  body_not_ends_with: String
  approval: Boolean

  """
  All values that are not equal to given value.
  """
  approval_not: Boolean
  selected: Boolean

  """
  All values that are not equal to given value.
  """
  selected_not: Boolean
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

type AnswerSubscriptionPayload {
  mutation: MutationType!
  node: Answer
  updatedFields: [String!]
  previousValues: AnswerPreviousValues
}

input AnswerSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [AnswerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AnswerWhereInput
}

input AnswerUpdateInput {
  body: String
  approval: Boolean
  selected: Boolean
  answeredBy: UserUpdateOneRequiredWithoutMyAnswersInput
  answeredTo: QuestionUpdateManyWithoutAnswersInput
  answerVote: AnswerVoteUpdateManyWithoutVotedAnswerInput
}

input AnswerUpdateManyDataInput {
  body: String
  approval: Boolean
  selected: Boolean
}

input AnswerUpdateManyMutationInput {
  body: String
  approval: Boolean
  selected: Boolean
}

input AnswerUpdateManyWithoutAnsweredByInput {
  create: [AnswerCreateWithoutAnsweredByInput!]
  connect: [AnswerWhereUniqueInput!]
  set: [AnswerWhereUniqueInput!]
  disconnect: [AnswerWhereUniqueInput!]
  delete: [AnswerWhereUniqueInput!]
  update: [AnswerUpdateWithWhereUniqueWithoutAnsweredByInput!]
  updateMany: [AnswerUpdateManyWithWhereNestedInput!]
  deleteMany: [AnswerScalarWhereInput!]
  upsert: [AnswerUpsertWithWhereUniqueWithoutAnsweredByInput!]
}

input AnswerUpdateManyWithoutAnsweredToInput {
  create: [AnswerCreateWithoutAnsweredToInput!]
  connect: [AnswerWhereUniqueInput!]
  set: [AnswerWhereUniqueInput!]
  disconnect: [AnswerWhereUniqueInput!]
  delete: [AnswerWhereUniqueInput!]
  update: [AnswerUpdateWithWhereUniqueWithoutAnsweredToInput!]
  updateMany: [AnswerUpdateManyWithWhereNestedInput!]
  deleteMany: [AnswerScalarWhereInput!]
  upsert: [AnswerUpsertWithWhereUniqueWithoutAnsweredToInput!]
}

input AnswerUpdateManyWithWhereNestedInput {
  where: AnswerScalarWhereInput!
  data: AnswerUpdateManyDataInput!
}

input AnswerUpdateOneRequiredWithoutAnswerVoteInput {
  create: AnswerCreateWithoutAnswerVoteInput
  connect: AnswerWhereUniqueInput
  update: AnswerUpdateWithoutAnswerVoteDataInput
  upsert: AnswerUpsertWithoutAnswerVoteInput
}

input AnswerUpdateWithoutAnsweredByDataInput {
  body: String
  approval: Boolean
  selected: Boolean
  answeredTo: QuestionUpdateManyWithoutAnswersInput
  answerVote: AnswerVoteUpdateManyWithoutVotedAnswerInput
}

input AnswerUpdateWithoutAnsweredToDataInput {
  body: String
  approval: Boolean
  selected: Boolean
  answeredBy: UserUpdateOneRequiredWithoutMyAnswersInput
  answerVote: AnswerVoteUpdateManyWithoutVotedAnswerInput
}

input AnswerUpdateWithoutAnswerVoteDataInput {
  body: String
  approval: Boolean
  selected: Boolean
  answeredBy: UserUpdateOneRequiredWithoutMyAnswersInput
  answeredTo: QuestionUpdateManyWithoutAnswersInput
}

input AnswerUpdateWithWhereUniqueWithoutAnsweredByInput {
  where: AnswerWhereUniqueInput!
  data: AnswerUpdateWithoutAnsweredByDataInput!
}

input AnswerUpdateWithWhereUniqueWithoutAnsweredToInput {
  where: AnswerWhereUniqueInput!
  data: AnswerUpdateWithoutAnsweredToDataInput!
}

input AnswerUpsertWithoutAnswerVoteInput {
  update: AnswerUpdateWithoutAnswerVoteDataInput!
  create: AnswerCreateWithoutAnswerVoteInput!
}

input AnswerUpsertWithWhereUniqueWithoutAnsweredByInput {
  where: AnswerWhereUniqueInput!
  update: AnswerUpdateWithoutAnsweredByDataInput!
  create: AnswerCreateWithoutAnsweredByInput!
}

input AnswerUpsertWithWhereUniqueWithoutAnsweredToInput {
  where: AnswerWhereUniqueInput!
  update: AnswerUpdateWithoutAnsweredToDataInput!
  create: AnswerCreateWithoutAnsweredToInput!
}

type AnswerVote implements Node {
  id: ID!
  votedBy: User!
  votedAnswer: Answer!
  vote: String
}

"""
A connection to a list of items.
"""
type AnswerVoteConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [AnswerVoteEdge]!
  aggregate: AggregateAnswerVote!
}

input AnswerVoteCreateInput {
  id: ID
  vote: String
  votedBy: UserCreateOneInput!
  votedAnswer: AnswerCreateOneWithoutAnswerVoteInput!
}

input AnswerVoteCreateManyWithoutVotedAnswerInput {
  create: [AnswerVoteCreateWithoutVotedAnswerInput!]
  connect: [AnswerVoteWhereUniqueInput!]
}

input AnswerVoteCreateWithoutVotedAnswerInput {
  id: ID
  vote: String
  votedBy: UserCreateOneInput!
}

"""
An edge in a connection.
"""
type AnswerVoteEdge {
  """
  The item at the end of the edge.
  """
  node: AnswerVote!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum AnswerVoteOrderByInput {
  id_ASC
  id_DESC
  vote_ASC
  vote_DESC
}

type AnswerVotePreviousValues {
  id: ID!
  vote: String
}

input AnswerVoteScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [AnswerVoteScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [AnswerVoteScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [AnswerVoteScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  vote: String

  """
  All values that are not equal to given value.
  """
  vote_not: String

  """
  All values that are contained in given list.
  """
  vote_in: [String!]

  """
  All values that are not contained in given list.
  """
  vote_not_in: [String!]

  """
  All values less than the given value.
  """
  vote_lt: String

  """
  All values less than or equal the given value.
  """
  vote_lte: String

  """
  All values greater than the given value.
  """
  vote_gt: String

  """
  All values greater than or equal the given value.
  """
  vote_gte: String

  """
  All values containing the given string.
  """
  vote_contains: String

  """
  All values not containing the given string.
  """
  vote_not_contains: String

  """
  All values starting with the given string.
  """
  vote_starts_with: String

  """
  All values not starting with the given string.
  """
  vote_not_starts_with: String

  """
  All values ending with the given string.
  """
  vote_ends_with: String

  """
  All values not ending with the given string.
  """
  vote_not_ends_with: String
}

type AnswerVoteSubscriptionPayload {
  mutation: MutationType!
  node: AnswerVote
  updatedFields: [String!]
  previousValues: AnswerVotePreviousValues
}

input AnswerVoteSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [AnswerVoteSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AnswerVoteWhereInput
}

input AnswerVoteUpdateInput {
  vote: String
  votedBy: UserUpdateOneRequiredInput
  votedAnswer: AnswerUpdateOneRequiredWithoutAnswerVoteInput
}

input AnswerVoteUpdateManyDataInput {
  vote: String
}

input AnswerVoteUpdateManyMutationInput {
  vote: String
}

input AnswerVoteUpdateManyWithoutVotedAnswerInput {
  create: [AnswerVoteCreateWithoutVotedAnswerInput!]
  connect: [AnswerVoteWhereUniqueInput!]
  set: [AnswerVoteWhereUniqueInput!]
  disconnect: [AnswerVoteWhereUniqueInput!]
  delete: [AnswerVoteWhereUniqueInput!]
  update: [AnswerVoteUpdateWithWhereUniqueWithoutVotedAnswerInput!]
  updateMany: [AnswerVoteUpdateManyWithWhereNestedInput!]
  deleteMany: [AnswerVoteScalarWhereInput!]
  upsert: [AnswerVoteUpsertWithWhereUniqueWithoutVotedAnswerInput!]
}

input AnswerVoteUpdateManyWithWhereNestedInput {
  where: AnswerVoteScalarWhereInput!
  data: AnswerVoteUpdateManyDataInput!
}

input AnswerVoteUpdateWithoutVotedAnswerDataInput {
  vote: String
  votedBy: UserUpdateOneRequiredInput
}

input AnswerVoteUpdateWithWhereUniqueWithoutVotedAnswerInput {
  where: AnswerVoteWhereUniqueInput!
  data: AnswerVoteUpdateWithoutVotedAnswerDataInput!
}

input AnswerVoteUpsertWithWhereUniqueWithoutVotedAnswerInput {
  where: AnswerVoteWhereUniqueInput!
  update: AnswerVoteUpdateWithoutVotedAnswerDataInput!
  create: AnswerVoteCreateWithoutVotedAnswerInput!
}

input AnswerVoteWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [AnswerVoteWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  vote: String

  """
  All values that are not equal to given value.
  """
  vote_not: String

  """
  All values that are contained in given list.
  """
  vote_in: [String!]

  """
  All values that are not contained in given list.
  """
  vote_not_in: [String!]

  """
  All values less than the given value.
  """
  vote_lt: String

  """
  All values less than or equal the given value.
  """
  vote_lte: String

  """
  All values greater than the given value.
  """
  vote_gt: String

  """
  All values greater than or equal the given value.
  """
  vote_gte: String

  """
  All values containing the given string.
  """
  vote_contains: String

  """
  All values not containing the given string.
  """
  vote_not_contains: String

  """
  All values starting with the given string.
  """
  vote_starts_with: String

  """
  All values not starting with the given string.
  """
  vote_not_starts_with: String

  """
  All values ending with the given string.
  """
  vote_ends_with: String

  """
  All values not ending with the given string.
  """
  vote_not_ends_with: String
  votedBy: UserWhereInput
  votedAnswer: AnswerWhereInput
}

input AnswerVoteWhereUniqueInput {
  id: ID
}

input AnswerWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [AnswerWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  body: String

  """
  All values that are not equal to given value.
  """
  body_not: String

  """
  All values that are contained in given list.
  """
  body_in: [String!]

  """
  All values that are not contained in given list.
  """
  body_not_in: [String!]

  """
  All values less than the given value.
  """
  body_lt: String

  """
  All values less than or equal the given value.
  """
  body_lte: String

  """
  All values greater than the given value.
  """
  body_gt: String

  """
  All values greater than or equal the given value.
  """
  body_gte: String

  """
  All values containing the given string.
  """
  body_contains: String

  """
  All values not containing the given string.
  """
  body_not_contains: String

  """
  All values starting with the given string.
  """
  body_starts_with: String

  """
  All values not starting with the given string.
  """
  body_not_starts_with: String

  """
  All values ending with the given string.
  """
  body_ends_with: String

  """
  All values not ending with the given string.
  """
  body_not_ends_with: String
  approval: Boolean

  """
  All values that are not equal to given value.
  """
  approval_not: Boolean
  selected: Boolean

  """
  All values that are not equal to given value.
  """
  selected_not: Boolean
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  answeredBy: UserWhereInput
  answeredTo_some: QuestionWhereInput
  answerVote_some: AnswerVoteWhereInput
}

input AnswerWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

type Blocks implements Node {
  id: ID!
  text: String
  type: String
  depth: Int
}

"""
A connection to a list of items.
"""
type BlocksConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [BlocksEdge]!
  aggregate: AggregateBlocks!
}

input BlocksCreateInput {
  id: ID
  text: String
  type: String
  depth: Int
}

input BlocksCreateManyInput {
  create: [BlocksCreateInput!]
  connect: [BlocksWhereUniqueInput!]
}

"""
An edge in a connection.
"""
type BlocksEdge {
  """
  The item at the end of the edge.
  """
  node: Blocks!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum BlocksOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  type_ASC
  type_DESC
  depth_ASC
  depth_DESC
}

type BlocksPreviousValues {
  id: ID!
  text: String
  type: String
  depth: Int
}

input BlocksScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [BlocksScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [BlocksScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [BlocksScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  text: String

  """
  All values that are not equal to given value.
  """
  text_not: String

  """
  All values that are contained in given list.
  """
  text_in: [String!]

  """
  All values that are not contained in given list.
  """
  text_not_in: [String!]

  """
  All values less than the given value.
  """
  text_lt: String

  """
  All values less than or equal the given value.
  """
  text_lte: String

  """
  All values greater than the given value.
  """
  text_gt: String

  """
  All values greater than or equal the given value.
  """
  text_gte: String

  """
  All values containing the given string.
  """
  text_contains: String

  """
  All values not containing the given string.
  """
  text_not_contains: String

  """
  All values starting with the given string.
  """
  text_starts_with: String

  """
  All values not starting with the given string.
  """
  text_not_starts_with: String

  """
  All values ending with the given string.
  """
  text_ends_with: String

  """
  All values not ending with the given string.
  """
  text_not_ends_with: String
  type: String

  """
  All values that are not equal to given value.
  """
  type_not: String

  """
  All values that are contained in given list.
  """
  type_in: [String!]

  """
  All values that are not contained in given list.
  """
  type_not_in: [String!]

  """
  All values less than the given value.
  """
  type_lt: String

  """
  All values less than or equal the given value.
  """
  type_lte: String

  """
  All values greater than the given value.
  """
  type_gt: String

  """
  All values greater than or equal the given value.
  """
  type_gte: String

  """
  All values containing the given string.
  """
  type_contains: String

  """
  All values not containing the given string.
  """
  type_not_contains: String

  """
  All values starting with the given string.
  """
  type_starts_with: String

  """
  All values not starting with the given string.
  """
  type_not_starts_with: String

  """
  All values ending with the given string.
  """
  type_ends_with: String

  """
  All values not ending with the given string.
  """
  type_not_ends_with: String
  depth: Int

  """
  All values that are not equal to given value.
  """
  depth_not: Int

  """
  All values that are contained in given list.
  """
  depth_in: [Int!]

  """
  All values that are not contained in given list.
  """
  depth_not_in: [Int!]

  """
  All values less than the given value.
  """
  depth_lt: Int

  """
  All values less than or equal the given value.
  """
  depth_lte: Int

  """
  All values greater than the given value.
  """
  depth_gt: Int

  """
  All values greater than or equal the given value.
  """
  depth_gte: Int
}

type BlocksSubscriptionPayload {
  mutation: MutationType!
  node: Blocks
  updatedFields: [String!]
  previousValues: BlocksPreviousValues
}

input BlocksSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [BlocksSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BlocksWhereInput
}

input BlocksUpdateDataInput {
  text: String
  type: String
  depth: Int
}

input BlocksUpdateInput {
  text: String
  type: String
  depth: Int
}

input BlocksUpdateManyDataInput {
  text: String
  type: String
  depth: Int
}

input BlocksUpdateManyInput {
  create: [BlocksCreateInput!]
  connect: [BlocksWhereUniqueInput!]
  set: [BlocksWhereUniqueInput!]
  disconnect: [BlocksWhereUniqueInput!]
  delete: [BlocksWhereUniqueInput!]
  update: [BlocksUpdateWithWhereUniqueNestedInput!]
  updateMany: [BlocksUpdateManyWithWhereNestedInput!]
  deleteMany: [BlocksScalarWhereInput!]
  upsert: [BlocksUpsertWithWhereUniqueNestedInput!]
}

input BlocksUpdateManyMutationInput {
  text: String
  type: String
  depth: Int
}

input BlocksUpdateManyWithWhereNestedInput {
  where: BlocksScalarWhereInput!
  data: BlocksUpdateManyDataInput!
}

input BlocksUpdateWithWhereUniqueNestedInput {
  where: BlocksWhereUniqueInput!
  data: BlocksUpdateDataInput!
}

input BlocksUpsertWithWhereUniqueNestedInput {
  where: BlocksWhereUniqueInput!
  update: BlocksUpdateDataInput!
  create: BlocksCreateInput!
}

input BlocksWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [BlocksWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  text: String

  """
  All values that are not equal to given value.
  """
  text_not: String

  """
  All values that are contained in given list.
  """
  text_in: [String!]

  """
  All values that are not contained in given list.
  """
  text_not_in: [String!]

  """
  All values less than the given value.
  """
  text_lt: String

  """
  All values less than or equal the given value.
  """
  text_lte: String

  """
  All values greater than the given value.
  """
  text_gt: String

  """
  All values greater than or equal the given value.
  """
  text_gte: String

  """
  All values containing the given string.
  """
  text_contains: String

  """
  All values not containing the given string.
  """
  text_not_contains: String

  """
  All values starting with the given string.
  """
  text_starts_with: String

  """
  All values not starting with the given string.
  """
  text_not_starts_with: String

  """
  All values ending with the given string.
  """
  text_ends_with: String

  """
  All values not ending with the given string.
  """
  text_not_ends_with: String
  type: String

  """
  All values that are not equal to given value.
  """
  type_not: String

  """
  All values that are contained in given list.
  """
  type_in: [String!]

  """
  All values that are not contained in given list.
  """
  type_not_in: [String!]

  """
  All values less than the given value.
  """
  type_lt: String

  """
  All values less than or equal the given value.
  """
  type_lte: String

  """
  All values greater than the given value.
  """
  type_gt: String

  """
  All values greater than or equal the given value.
  """
  type_gte: String

  """
  All values containing the given string.
  """
  type_contains: String

  """
  All values not containing the given string.
  """
  type_not_contains: String

  """
  All values starting with the given string.
  """
  type_starts_with: String

  """
  All values not starting with the given string.
  """
  type_not_starts_with: String

  """
  All values ending with the given string.
  """
  type_ends_with: String

  """
  All values not ending with the given string.
  """
  type_not_ends_with: String
  depth: Int

  """
  All values that are not equal to given value.
  """
  depth_not: Int

  """
  All values that are contained in given list.
  """
  depth_in: [Int!]

  """
  All values that are not contained in given list.
  """
  depth_not_in: [Int!]

  """
  All values less than the given value.
  """
  depth_lt: Int

  """
  All values less than or equal the given value.
  """
  depth_lte: Int

  """
  All values greater than the given value.
  """
  depth_gt: Int

  """
  All values greater than or equal the given value.
  """
  depth_gte: Int
}

input BlocksWhereUniqueInput {
  id: ID
}

type Blog implements Node {
  id: ID!
  blocks(
    where: BlocksWhereInput
    orderBy: BlocksOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Blocks!]
}

"""
A connection to a list of items.
"""
type BlogConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [BlogEdge]!
  aggregate: AggregateBlog!
}

input BlogCreateInput {
  id: ID
  blocks: BlocksCreateManyInput
}

"""
An edge in a connection.
"""
type BlogEdge {
  """
  The item at the end of the edge.
  """
  node: Blog!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum BlogOrderByInput {
  id_ASC
  id_DESC
}

type BlogPreviousValues {
  id: ID!
}

type BlogSubscriptionPayload {
  mutation: MutationType!
  node: Blog
  updatedFields: [String!]
  previousValues: BlogPreviousValues
}

input BlogSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [BlogSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BlogWhereInput
}

input BlogUpdateInput {
  blocks: BlocksUpdateManyInput
}

input BlogWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [BlogWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  blocks_some: BlocksWhereInput
}

input BlogWhereUniqueInput {
  id: ID
}

type BookMark implements Node {
  id: ID!
  questions(
    where: QuestionWhereInput
    orderBy: QuestionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Question!]
  markedBy: User!
}

"""
A connection to a list of items.
"""
type BookMarkConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [BookMarkEdge]!
  aggregate: AggregateBookMark!
}

input BookMarkCreateInput {
  id: ID
  questions: QuestionCreateManyWithoutBookMarkInput
  markedBy: UserCreateOneWithoutMyBookMarksInput!
}

input BookMarkCreateManyWithoutMarkedByInput {
  create: [BookMarkCreateWithoutMarkedByInput!]
  connect: [BookMarkWhereUniqueInput!]
}

input BookMarkCreateManyWithoutQuestionsInput {
  create: [BookMarkCreateWithoutQuestionsInput!]
  connect: [BookMarkWhereUniqueInput!]
}

input BookMarkCreateWithoutMarkedByInput {
  id: ID
  questions: QuestionCreateManyWithoutBookMarkInput
}

input BookMarkCreateWithoutQuestionsInput {
  id: ID
  markedBy: UserCreateOneWithoutMyBookMarksInput!
}

"""
An edge in a connection.
"""
type BookMarkEdge {
  """
  The item at the end of the edge.
  """
  node: BookMark!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum BookMarkOrderByInput {
  id_ASC
  id_DESC
}

type BookMarkPreviousValues {
  id: ID!
}

input BookMarkScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [BookMarkScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [BookMarkScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [BookMarkScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
}

type BookMarkSubscriptionPayload {
  mutation: MutationType!
  node: BookMark
  updatedFields: [String!]
  previousValues: BookMarkPreviousValues
}

input BookMarkSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [BookMarkSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BookMarkWhereInput
}

input BookMarkUpdateInput {
  questions: QuestionUpdateManyWithoutBookMarkInput
  markedBy: UserUpdateOneRequiredWithoutMyBookMarksInput
}

input BookMarkUpdateManyWithoutMarkedByInput {
  create: [BookMarkCreateWithoutMarkedByInput!]
  connect: [BookMarkWhereUniqueInput!]
  set: [BookMarkWhereUniqueInput!]
  disconnect: [BookMarkWhereUniqueInput!]
  delete: [BookMarkWhereUniqueInput!]
  update: [BookMarkUpdateWithWhereUniqueWithoutMarkedByInput!]
  deleteMany: [BookMarkScalarWhereInput!]
  upsert: [BookMarkUpsertWithWhereUniqueWithoutMarkedByInput!]
}

input BookMarkUpdateManyWithoutQuestionsInput {
  create: [BookMarkCreateWithoutQuestionsInput!]
  connect: [BookMarkWhereUniqueInput!]
  set: [BookMarkWhereUniqueInput!]
  disconnect: [BookMarkWhereUniqueInput!]
  delete: [BookMarkWhereUniqueInput!]
  update: [BookMarkUpdateWithWhereUniqueWithoutQuestionsInput!]
  deleteMany: [BookMarkScalarWhereInput!]
  upsert: [BookMarkUpsertWithWhereUniqueWithoutQuestionsInput!]
}

input BookMarkUpdateWithoutMarkedByDataInput {
  questions: QuestionUpdateManyWithoutBookMarkInput
}

input BookMarkUpdateWithoutQuestionsDataInput {
  markedBy: UserUpdateOneRequiredWithoutMyBookMarksInput
}

input BookMarkUpdateWithWhereUniqueWithoutMarkedByInput {
  where: BookMarkWhereUniqueInput!
  data: BookMarkUpdateWithoutMarkedByDataInput!
}

input BookMarkUpdateWithWhereUniqueWithoutQuestionsInput {
  where: BookMarkWhereUniqueInput!
  data: BookMarkUpdateWithoutQuestionsDataInput!
}

input BookMarkUpsertWithWhereUniqueWithoutMarkedByInput {
  where: BookMarkWhereUniqueInput!
  update: BookMarkUpdateWithoutMarkedByDataInput!
  create: BookMarkCreateWithoutMarkedByInput!
}

input BookMarkUpsertWithWhereUniqueWithoutQuestionsInput {
  where: BookMarkWhereUniqueInput!
  update: BookMarkUpdateWithoutQuestionsDataInput!
  create: BookMarkCreateWithoutQuestionsInput!
}

input BookMarkWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [BookMarkWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  questions_some: QuestionWhereInput
  markedBy: UserWhereInput
}

input BookMarkWhereUniqueInput {
  id: ID
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createAnswer(data: AnswerCreateInput!): Answer!
  createBookMark(data: BookMarkCreateInput!): BookMark!
  createQuestionView(data: QuestionViewCreateInput!): QuestionView!
  createQuestionVote(data: QuestionVoteCreateInput!): QuestionVote!
  createAnswerVote(data: AnswerVoteCreateInput!): AnswerVote!
  createBlog(data: BlogCreateInput!): Blog!
  createQuestion(data: QuestionCreateInput!): Question!
  createTag(data: TagCreateInput!): Tag!
  createBlocks(data: BlocksCreateInput!): Blocks!
  createUser(data: UserCreateInput!): User!
  updateAnswer(data: AnswerUpdateInput!, where: AnswerWhereUniqueInput!): Answer
  updateBookMark(
    data: BookMarkUpdateInput!
    where: BookMarkWhereUniqueInput!
  ): BookMark
  updateQuestionView(
    data: QuestionViewUpdateInput!
    where: QuestionViewWhereUniqueInput!
  ): QuestionView
  updateQuestionVote(
    data: QuestionVoteUpdateInput!
    where: QuestionVoteWhereUniqueInput!
  ): QuestionVote
  updateAnswerVote(
    data: AnswerVoteUpdateInput!
    where: AnswerVoteWhereUniqueInput!
  ): AnswerVote
  updateBlog(data: BlogUpdateInput!, where: BlogWhereUniqueInput!): Blog
  updateQuestion(
    data: QuestionUpdateInput!
    where: QuestionWhereUniqueInput!
  ): Question
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateBlocks(data: BlocksUpdateInput!, where: BlocksWhereUniqueInput!): Blocks
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteAnswer(where: AnswerWhereUniqueInput!): Answer
  deleteBookMark(where: BookMarkWhereUniqueInput!): BookMark
  deleteQuestionView(where: QuestionViewWhereUniqueInput!): QuestionView
  deleteQuestionVote(where: QuestionVoteWhereUniqueInput!): QuestionVote
  deleteAnswerVote(where: AnswerVoteWhereUniqueInput!): AnswerVote
  deleteBlog(where: BlogWhereUniqueInput!): Blog
  deleteQuestion(where: QuestionWhereUniqueInput!): Question
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteBlocks(where: BlocksWhereUniqueInput!): Blocks
  deleteUser(where: UserWhereUniqueInput!): User
  upsertAnswer(
    where: AnswerWhereUniqueInput!
    create: AnswerCreateInput!
    update: AnswerUpdateInput!
  ): Answer!
  upsertBookMark(
    where: BookMarkWhereUniqueInput!
    create: BookMarkCreateInput!
    update: BookMarkUpdateInput!
  ): BookMark!
  upsertQuestionView(
    where: QuestionViewWhereUniqueInput!
    create: QuestionViewCreateInput!
    update: QuestionViewUpdateInput!
  ): QuestionView!
  upsertQuestionVote(
    where: QuestionVoteWhereUniqueInput!
    create: QuestionVoteCreateInput!
    update: QuestionVoteUpdateInput!
  ): QuestionVote!
  upsertAnswerVote(
    where: AnswerVoteWhereUniqueInput!
    create: AnswerVoteCreateInput!
    update: AnswerVoteUpdateInput!
  ): AnswerVote!
  upsertBlog(
    where: BlogWhereUniqueInput!
    create: BlogCreateInput!
    update: BlogUpdateInput!
  ): Blog!
  upsertQuestion(
    where: QuestionWhereUniqueInput!
    create: QuestionCreateInput!
    update: QuestionUpdateInput!
  ): Question!
  upsertTag(
    where: TagWhereUniqueInput!
    create: TagCreateInput!
    update: TagUpdateInput!
  ): Tag!
  upsertBlocks(
    where: BlocksWhereUniqueInput!
    create: BlocksCreateInput!
    update: BlocksUpdateInput!
  ): Blocks!
  upsertUser(
    where: UserWhereUniqueInput!
    create: UserCreateInput!
    update: UserUpdateInput!
  ): User!
  updateManyAnswers(
    data: AnswerUpdateManyMutationInput!
    where: AnswerWhereInput
  ): BatchPayload!
  updateManyQuestionVotes(
    data: QuestionVoteUpdateManyMutationInput!
    where: QuestionVoteWhereInput
  ): BatchPayload!
  updateManyAnswerVotes(
    data: AnswerVoteUpdateManyMutationInput!
    where: AnswerVoteWhereInput
  ): BatchPayload!
  updateManyQuestions(
    data: QuestionUpdateManyMutationInput!
    where: QuestionWhereInput
  ): BatchPayload!
  updateManyTags(
    data: TagUpdateManyMutationInput!
    where: TagWhereInput
  ): BatchPayload!
  updateManyBlockses(
    data: BlocksUpdateManyMutationInput!
    where: BlocksWhereInput
  ): BatchPayload!
  updateManyUsers(
    data: UserUpdateManyMutationInput!
    where: UserWhereInput
  ): BatchPayload!
  deleteManyAnswers(where: AnswerWhereInput): BatchPayload!
  deleteManyBookMarks(where: BookMarkWhereInput): BatchPayload!
  deleteManyQuestionViews(where: QuestionViewWhereInput): BatchPayload!
  deleteManyQuestionVotes(where: QuestionVoteWhereInput): BatchPayload!
  deleteManyAnswerVotes(where: AnswerVoteWhereInput): BatchPayload!
  deleteManyBlogs(where: BlogWhereInput): BatchPayload!
  deleteManyQuestions(where: QuestionWhereInput): BatchPayload!
  deleteManyTags(where: TagWhereInput): BatchPayload!
  deleteManyBlockses(where: BlocksWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

enum Permission {
  ADMIN
  USER
  MODERATOR
  PERMISSIONUPDATE
}

type Query {
  answers(
    where: AnswerWhereInput
    orderBy: AnswerOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Answer]!
  bookMarks(
    where: BookMarkWhereInput
    orderBy: BookMarkOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [BookMark]!
  questionViews(
    where: QuestionViewWhereInput
    orderBy: QuestionViewOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [QuestionView]!
  questionVotes(
    where: QuestionVoteWhereInput
    orderBy: QuestionVoteOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [QuestionVote]!
  answerVotes(
    where: AnswerVoteWhereInput
    orderBy: AnswerVoteOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [AnswerVote]!
  blogs(
    where: BlogWhereInput
    orderBy: BlogOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Blog]!
  questions(
    where: QuestionWhereInput
    orderBy: QuestionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Question]!
  tags(
    where: TagWhereInput
    orderBy: TagOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Tag]!
  blockses(
    where: BlocksWhereInput
    orderBy: BlocksOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Blocks]!
  users(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User]!
  answer(where: AnswerWhereUniqueInput!): Answer
  bookMark(where: BookMarkWhereUniqueInput!): BookMark
  questionView(where: QuestionViewWhereUniqueInput!): QuestionView
  questionVote(where: QuestionVoteWhereUniqueInput!): QuestionVote
  answerVote(where: AnswerVoteWhereUniqueInput!): AnswerVote
  blog(where: BlogWhereUniqueInput!): Blog
  question(where: QuestionWhereUniqueInput!): Question
  tag(where: TagWhereUniqueInput!): Tag
  blocks(where: BlocksWhereUniqueInput!): Blocks
  user(where: UserWhereUniqueInput!): User
  answersConnection(
    where: AnswerWhereInput
    orderBy: AnswerOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): AnswerConnection!
  bookMarksConnection(
    where: BookMarkWhereInput
    orderBy: BookMarkOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): BookMarkConnection!
  questionViewsConnection(
    where: QuestionViewWhereInput
    orderBy: QuestionViewOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): QuestionViewConnection!
  questionVotesConnection(
    where: QuestionVoteWhereInput
    orderBy: QuestionVoteOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): QuestionVoteConnection!
  answerVotesConnection(
    where: AnswerVoteWhereInput
    orderBy: AnswerVoteOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): AnswerVoteConnection!
  blogsConnection(
    where: BlogWhereInput
    orderBy: BlogOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): BlogConnection!
  questionsConnection(
    where: QuestionWhereInput
    orderBy: QuestionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): QuestionConnection!
  tagsConnection(
    where: TagWhereInput
    orderBy: TagOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): TagConnection!
  blocksesConnection(
    where: BlocksWhereInput
    orderBy: BlocksOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): BlocksConnection!
  usersConnection(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): UserConnection!

  """
  Fetches an object given its ID
  """
  node(
    """
    The ID of an object
    """
    id: ID!
  ): Node
}

type Question implements Node {
  id: ID!
  tags(
    where: TagWhereInput
    orderBy: TagOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Tag!]
  title: String!
  description: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  askedBy(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User!]
  approval: Boolean
  answers(
    where: AnswerWhereInput
    orderBy: AnswerOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Answer!]
  questionVote(
    where: QuestionVoteWhereInput
    orderBy: QuestionVoteOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [QuestionVote!]
  bookMark(
    where: BookMarkWhereInput
    orderBy: BookMarkOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [BookMark!]
}

"""
A connection to a list of items.
"""
type QuestionConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [QuestionEdge]!
  aggregate: AggregateQuestion!
}

input QuestionCreateInput {
  id: ID
  title: String!
  description: String!
  approval: Boolean
  tags: TagCreateManyInput
  askedBy: UserCreateManyWithoutMyQuestionsInput
  answers: AnswerCreateManyWithoutAnsweredToInput
  questionVote: QuestionVoteCreateManyWithoutVotedQuestionInput
  bookMark: BookMarkCreateManyWithoutQuestionsInput
}

input QuestionCreateManyWithoutAnswersInput {
  create: [QuestionCreateWithoutAnswersInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutAskedByInput {
  create: [QuestionCreateWithoutAskedByInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutBookMarkInput {
  create: [QuestionCreateWithoutBookMarkInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateOneInput {
  create: QuestionCreateInput
  connect: QuestionWhereUniqueInput
}

input QuestionCreateOneWithoutQuestionVoteInput {
  create: QuestionCreateWithoutQuestionVoteInput
  connect: QuestionWhereUniqueInput
}

input QuestionCreateWithoutAnswersInput {
  id: ID
  title: String!
  description: String!
  approval: Boolean
  tags: TagCreateManyInput
  askedBy: UserCreateManyWithoutMyQuestionsInput
  questionVote: QuestionVoteCreateManyWithoutVotedQuestionInput
  bookMark: BookMarkCreateManyWithoutQuestionsInput
}

input QuestionCreateWithoutAskedByInput {
  id: ID
  title: String!
  description: String!
  approval: Boolean
  tags: TagCreateManyInput
  answers: AnswerCreateManyWithoutAnsweredToInput
  questionVote: QuestionVoteCreateManyWithoutVotedQuestionInput
  bookMark: BookMarkCreateManyWithoutQuestionsInput
}

input QuestionCreateWithoutBookMarkInput {
  id: ID
  title: String!
  description: String!
  approval: Boolean
  tags: TagCreateManyInput
  askedBy: UserCreateManyWithoutMyQuestionsInput
  answers: AnswerCreateManyWithoutAnsweredToInput
  questionVote: QuestionVoteCreateManyWithoutVotedQuestionInput
}

input QuestionCreateWithoutQuestionVoteInput {
  id: ID
  title: String!
  description: String!
  approval: Boolean
  tags: TagCreateManyInput
  askedBy: UserCreateManyWithoutMyQuestionsInput
  answers: AnswerCreateManyWithoutAnsweredToInput
  bookMark: BookMarkCreateManyWithoutQuestionsInput
}

"""
An edge in a connection.
"""
type QuestionEdge {
  """
  The item at the end of the edge.
  """
  node: Question!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum QuestionOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  approval_ASC
  approval_DESC
}

type QuestionPreviousValues {
  id: ID!
  title: String!
  description: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  approval: Boolean
}

input QuestionScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [QuestionScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [QuestionScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [QuestionScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  title: String

  """
  All values that are not equal to given value.
  """
  title_not: String

  """
  All values that are contained in given list.
  """
  title_in: [String!]

  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]

  """
  All values less than the given value.
  """
  title_lt: String

  """
  All values less than or equal the given value.
  """
  title_lte: String

  """
  All values greater than the given value.
  """
  title_gt: String

  """
  All values greater than or equal the given value.
  """
  title_gte: String

  """
  All values containing the given string.
  """
  title_contains: String

  """
  All values not containing the given string.
  """
  title_not_contains: String

  """
  All values starting with the given string.
  """
  title_starts_with: String

  """
  All values not starting with the given string.
  """
  title_not_starts_with: String

  """
  All values ending with the given string.
  """
  title_ends_with: String

  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  description: String

  """
  All values that are not equal to given value.
  """
  description_not: String

  """
  All values that are contained in given list.
  """
  description_in: [String!]

  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]

  """
  All values less than the given value.
  """
  description_lt: String

  """
  All values less than or equal the given value.
  """
  description_lte: String

  """
  All values greater than the given value.
  """
  description_gt: String

  """
  All values greater than or equal the given value.
  """
  description_gte: String

  """
  All values containing the given string.
  """
  description_contains: String

  """
  All values not containing the given string.
  """
  description_not_contains: String

  """
  All values starting with the given string.
  """
  description_starts_with: String

  """
  All values not starting with the given string.
  """
  description_not_starts_with: String

  """
  All values ending with the given string.
  """
  description_ends_with: String

  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  approval: Boolean

  """
  All values that are not equal to given value.
  """
  approval_not: Boolean
}

type QuestionSubscriptionPayload {
  mutation: MutationType!
  node: Question
  updatedFields: [String!]
  previousValues: QuestionPreviousValues
}

input QuestionSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [QuestionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QuestionWhereInput
}

input QuestionUpdateDataInput {
  title: String
  description: String
  approval: Boolean
  tags: TagUpdateManyInput
  askedBy: UserUpdateManyWithoutMyQuestionsInput
  answers: AnswerUpdateManyWithoutAnsweredToInput
  questionVote: QuestionVoteUpdateManyWithoutVotedQuestionInput
  bookMark: BookMarkUpdateManyWithoutQuestionsInput
}

input QuestionUpdateInput {
  title: String
  description: String
  approval: Boolean
  tags: TagUpdateManyInput
  askedBy: UserUpdateManyWithoutMyQuestionsInput
  answers: AnswerUpdateManyWithoutAnsweredToInput
  questionVote: QuestionVoteUpdateManyWithoutVotedQuestionInput
  bookMark: BookMarkUpdateManyWithoutQuestionsInput
}

input QuestionUpdateManyDataInput {
  title: String
  description: String
  approval: Boolean
}

input QuestionUpdateManyMutationInput {
  title: String
  description: String
  approval: Boolean
}

input QuestionUpdateManyWithoutAnswersInput {
  create: [QuestionCreateWithoutAnswersInput!]
  connect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutAnswersInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
  deleteMany: [QuestionScalarWhereInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutAnswersInput!]
}

input QuestionUpdateManyWithoutAskedByInput {
  create: [QuestionCreateWithoutAskedByInput!]
  connect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutAskedByInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
  deleteMany: [QuestionScalarWhereInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutAskedByInput!]
}

input QuestionUpdateManyWithoutBookMarkInput {
  create: [QuestionCreateWithoutBookMarkInput!]
  connect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutBookMarkInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
  deleteMany: [QuestionScalarWhereInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutBookMarkInput!]
}

input QuestionUpdateManyWithWhereNestedInput {
  where: QuestionScalarWhereInput!
  data: QuestionUpdateManyDataInput!
}

input QuestionUpdateOneRequiredInput {
  create: QuestionCreateInput
  connect: QuestionWhereUniqueInput
  update: QuestionUpdateDataInput
  upsert: QuestionUpsertNestedInput
}

input QuestionUpdateOneRequiredWithoutQuestionVoteInput {
  create: QuestionCreateWithoutQuestionVoteInput
  connect: QuestionWhereUniqueInput
  update: QuestionUpdateWithoutQuestionVoteDataInput
  upsert: QuestionUpsertWithoutQuestionVoteInput
}

input QuestionUpdateWithoutAnswersDataInput {
  title: String
  description: String
  approval: Boolean
  tags: TagUpdateManyInput
  askedBy: UserUpdateManyWithoutMyQuestionsInput
  questionVote: QuestionVoteUpdateManyWithoutVotedQuestionInput
  bookMark: BookMarkUpdateManyWithoutQuestionsInput
}

input QuestionUpdateWithoutAskedByDataInput {
  title: String
  description: String
  approval: Boolean
  tags: TagUpdateManyInput
  answers: AnswerUpdateManyWithoutAnsweredToInput
  questionVote: QuestionVoteUpdateManyWithoutVotedQuestionInput
  bookMark: BookMarkUpdateManyWithoutQuestionsInput
}

input QuestionUpdateWithoutBookMarkDataInput {
  title: String
  description: String
  approval: Boolean
  tags: TagUpdateManyInput
  askedBy: UserUpdateManyWithoutMyQuestionsInput
  answers: AnswerUpdateManyWithoutAnsweredToInput
  questionVote: QuestionVoteUpdateManyWithoutVotedQuestionInput
}

input QuestionUpdateWithoutQuestionVoteDataInput {
  title: String
  description: String
  approval: Boolean
  tags: TagUpdateManyInput
  askedBy: UserUpdateManyWithoutMyQuestionsInput
  answers: AnswerUpdateManyWithoutAnsweredToInput
  bookMark: BookMarkUpdateManyWithoutQuestionsInput
}

input QuestionUpdateWithWhereUniqueWithoutAnswersInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutAnswersDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutAskedByInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutAskedByDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutBookMarkInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutBookMarkDataInput!
}

input QuestionUpsertNestedInput {
  update: QuestionUpdateDataInput!
  create: QuestionCreateInput!
}

input QuestionUpsertWithoutQuestionVoteInput {
  update: QuestionUpdateWithoutQuestionVoteDataInput!
  create: QuestionCreateWithoutQuestionVoteInput!
}

input QuestionUpsertWithWhereUniqueWithoutAnswersInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutAnswersDataInput!
  create: QuestionCreateWithoutAnswersInput!
}

input QuestionUpsertWithWhereUniqueWithoutAskedByInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutAskedByDataInput!
  create: QuestionCreateWithoutAskedByInput!
}

input QuestionUpsertWithWhereUniqueWithoutBookMarkInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutBookMarkDataInput!
  create: QuestionCreateWithoutBookMarkInput!
}

type QuestionView implements Node {
  id: ID!
  viewedBy: User!
  viewedQuestion: Question!
}

"""
A connection to a list of items.
"""
type QuestionViewConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [QuestionViewEdge]!
  aggregate: AggregateQuestionView!
}

input QuestionViewCreateInput {
  id: ID
  viewedBy: UserCreateOneInput!
  viewedQuestion: QuestionCreateOneInput!
}

"""
An edge in a connection.
"""
type QuestionViewEdge {
  """
  The item at the end of the edge.
  """
  node: QuestionView!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum QuestionViewOrderByInput {
  id_ASC
  id_DESC
}

type QuestionViewPreviousValues {
  id: ID!
}

type QuestionViewSubscriptionPayload {
  mutation: MutationType!
  node: QuestionView
  updatedFields: [String!]
  previousValues: QuestionViewPreviousValues
}

input QuestionViewSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [QuestionViewSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QuestionViewWhereInput
}

input QuestionViewUpdateInput {
  viewedBy: UserUpdateOneRequiredInput
  viewedQuestion: QuestionUpdateOneRequiredInput
}

input QuestionViewWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [QuestionViewWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  viewedBy: UserWhereInput
  viewedQuestion: QuestionWhereInput
}

input QuestionViewWhereUniqueInput {
  id: ID
}

type QuestionVote implements Node {
  id: ID!
  votedBy: User!
  votedQuestion: Question!
  vote: String
}

"""
A connection to a list of items.
"""
type QuestionVoteConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [QuestionVoteEdge]!
  aggregate: AggregateQuestionVote!
}

input QuestionVoteCreateInput {
  id: ID
  vote: String
  votedBy: UserCreateOneInput!
  votedQuestion: QuestionCreateOneWithoutQuestionVoteInput!
}

input QuestionVoteCreateManyWithoutVotedQuestionInput {
  create: [QuestionVoteCreateWithoutVotedQuestionInput!]
  connect: [QuestionVoteWhereUniqueInput!]
}

input QuestionVoteCreateWithoutVotedQuestionInput {
  id: ID
  vote: String
  votedBy: UserCreateOneInput!
}

"""
An edge in a connection.
"""
type QuestionVoteEdge {
  """
  The item at the end of the edge.
  """
  node: QuestionVote!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum QuestionVoteOrderByInput {
  id_ASC
  id_DESC
  vote_ASC
  vote_DESC
}

type QuestionVotePreviousValues {
  id: ID!
  vote: String
}

input QuestionVoteScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [QuestionVoteScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [QuestionVoteScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [QuestionVoteScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  vote: String

  """
  All values that are not equal to given value.
  """
  vote_not: String

  """
  All values that are contained in given list.
  """
  vote_in: [String!]

  """
  All values that are not contained in given list.
  """
  vote_not_in: [String!]

  """
  All values less than the given value.
  """
  vote_lt: String

  """
  All values less than or equal the given value.
  """
  vote_lte: String

  """
  All values greater than the given value.
  """
  vote_gt: String

  """
  All values greater than or equal the given value.
  """
  vote_gte: String

  """
  All values containing the given string.
  """
  vote_contains: String

  """
  All values not containing the given string.
  """
  vote_not_contains: String

  """
  All values starting with the given string.
  """
  vote_starts_with: String

  """
  All values not starting with the given string.
  """
  vote_not_starts_with: String

  """
  All values ending with the given string.
  """
  vote_ends_with: String

  """
  All values not ending with the given string.
  """
  vote_not_ends_with: String
}

type QuestionVoteSubscriptionPayload {
  mutation: MutationType!
  node: QuestionVote
  updatedFields: [String!]
  previousValues: QuestionVotePreviousValues
}

input QuestionVoteSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [QuestionVoteSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QuestionVoteWhereInput
}

input QuestionVoteUpdateInput {
  vote: String
  votedBy: UserUpdateOneRequiredInput
  votedQuestion: QuestionUpdateOneRequiredWithoutQuestionVoteInput
}

input QuestionVoteUpdateManyDataInput {
  vote: String
}

input QuestionVoteUpdateManyMutationInput {
  vote: String
}

input QuestionVoteUpdateManyWithoutVotedQuestionInput {
  create: [QuestionVoteCreateWithoutVotedQuestionInput!]
  connect: [QuestionVoteWhereUniqueInput!]
  set: [QuestionVoteWhereUniqueInput!]
  disconnect: [QuestionVoteWhereUniqueInput!]
  delete: [QuestionVoteWhereUniqueInput!]
  update: [QuestionVoteUpdateWithWhereUniqueWithoutVotedQuestionInput!]
  updateMany: [QuestionVoteUpdateManyWithWhereNestedInput!]
  deleteMany: [QuestionVoteScalarWhereInput!]
  upsert: [QuestionVoteUpsertWithWhereUniqueWithoutVotedQuestionInput!]
}

input QuestionVoteUpdateManyWithWhereNestedInput {
  where: QuestionVoteScalarWhereInput!
  data: QuestionVoteUpdateManyDataInput!
}

input QuestionVoteUpdateWithoutVotedQuestionDataInput {
  vote: String
  votedBy: UserUpdateOneRequiredInput
}

input QuestionVoteUpdateWithWhereUniqueWithoutVotedQuestionInput {
  where: QuestionVoteWhereUniqueInput!
  data: QuestionVoteUpdateWithoutVotedQuestionDataInput!
}

input QuestionVoteUpsertWithWhereUniqueWithoutVotedQuestionInput {
  where: QuestionVoteWhereUniqueInput!
  update: QuestionVoteUpdateWithoutVotedQuestionDataInput!
  create: QuestionVoteCreateWithoutVotedQuestionInput!
}

input QuestionVoteWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [QuestionVoteWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  vote: String

  """
  All values that are not equal to given value.
  """
  vote_not: String

  """
  All values that are contained in given list.
  """
  vote_in: [String!]

  """
  All values that are not contained in given list.
  """
  vote_not_in: [String!]

  """
  All values less than the given value.
  """
  vote_lt: String

  """
  All values less than or equal the given value.
  """
  vote_lte: String

  """
  All values greater than the given value.
  """
  vote_gt: String

  """
  All values greater than or equal the given value.
  """
  vote_gte: String

  """
  All values containing the given string.
  """
  vote_contains: String

  """
  All values not containing the given string.
  """
  vote_not_contains: String

  """
  All values starting with the given string.
  """
  vote_starts_with: String

  """
  All values not starting with the given string.
  """
  vote_not_starts_with: String

  """
  All values ending with the given string.
  """
  vote_ends_with: String

  """
  All values not ending with the given string.
  """
  vote_not_ends_with: String
  votedBy: UserWhereInput
  votedQuestion: QuestionWhereInput
}

input QuestionVoteWhereUniqueInput {
  id: ID
}

input QuestionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [QuestionWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  title: String

  """
  All values that are not equal to given value.
  """
  title_not: String

  """
  All values that are contained in given list.
  """
  title_in: [String!]

  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]

  """
  All values less than the given value.
  """
  title_lt: String

  """
  All values less than or equal the given value.
  """
  title_lte: String

  """
  All values greater than the given value.
  """
  title_gt: String

  """
  All values greater than or equal the given value.
  """
  title_gte: String

  """
  All values containing the given string.
  """
  title_contains: String

  """
  All values not containing the given string.
  """
  title_not_contains: String

  """
  All values starting with the given string.
  """
  title_starts_with: String

  """
  All values not starting with the given string.
  """
  title_not_starts_with: String

  """
  All values ending with the given string.
  """
  title_ends_with: String

  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  description: String

  """
  All values that are not equal to given value.
  """
  description_not: String

  """
  All values that are contained in given list.
  """
  description_in: [String!]

  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]

  """
  All values less than the given value.
  """
  description_lt: String

  """
  All values less than or equal the given value.
  """
  description_lte: String

  """
  All values greater than the given value.
  """
  description_gt: String

  """
  All values greater than or equal the given value.
  """
  description_gte: String

  """
  All values containing the given string.
  """
  description_contains: String

  """
  All values not containing the given string.
  """
  description_not_contains: String

  """
  All values starting with the given string.
  """
  description_starts_with: String

  """
  All values not starting with the given string.
  """
  description_not_starts_with: String

  """
  All values ending with the given string.
  """
  description_ends_with: String

  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  approval: Boolean

  """
  All values that are not equal to given value.
  """
  approval_not: Boolean
  tags_some: TagWhereInput
  askedBy_some: UserWhereInput
  answers_some: AnswerWhereInput
  questionVote_some: QuestionVoteWhereInput
  bookMark_some: BookMarkWhereInput
}

input QuestionWhereUniqueInput {
  id: ID
}

type Subscription {
  answer(where: AnswerSubscriptionWhereInput): AnswerSubscriptionPayload
  bookMark(where: BookMarkSubscriptionWhereInput): BookMarkSubscriptionPayload
  questionView(
    where: QuestionViewSubscriptionWhereInput
  ): QuestionViewSubscriptionPayload
  questionVote(
    where: QuestionVoteSubscriptionWhereInput
  ): QuestionVoteSubscriptionPayload
  answerVote(
    where: AnswerVoteSubscriptionWhereInput
  ): AnswerVoteSubscriptionPayload
  blog(where: BlogSubscriptionWhereInput): BlogSubscriptionPayload
  question(where: QuestionSubscriptionWhereInput): QuestionSubscriptionPayload
  tag(where: TagSubscriptionWhereInput): TagSubscriptionPayload
  blocks(where: BlocksSubscriptionWhereInput): BlocksSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Tag implements Node {
  id: ID!
  name: String!
}

"""
A connection to a list of items.
"""
type TagConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [TagEdge]!
  aggregate: AggregateTag!
}

input TagCreateInput {
  id: ID
  name: String!
}

input TagCreateManyInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

"""
An edge in a connection.
"""
type TagEdge {
  """
  The item at the end of the edge.
  """
  node: Tag!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum TagOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type TagPreviousValues {
  id: ID!
  name: String!
}

input TagScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TagScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [TagScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [TagScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String

  """
  All values that are not equal to given value.
  """
  name_not: String

  """
  All values that are contained in given list.
  """
  name_in: [String!]

  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]

  """
  All values less than the given value.
  """
  name_lt: String

  """
  All values less than or equal the given value.
  """
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
}

type TagSubscriptionPayload {
  mutation: MutationType!
  node: Tag
  updatedFields: [String!]
  previousValues: TagPreviousValues
}

input TagSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TagSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TagWhereInput
}

input TagUpdateDataInput {
  name: String
}

input TagUpdateInput {
  name: String
}

input TagUpdateManyDataInput {
  name: String
}

input TagUpdateManyInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  delete: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueNestedInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
  deleteMany: [TagScalarWhereInput!]
  upsert: [TagUpsertWithWhereUniqueNestedInput!]
}

input TagUpdateManyMutationInput {
  name: String
}

input TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput!
  data: TagUpdateManyDataInput!
}

input TagUpdateWithWhereUniqueNestedInput {
  where: TagWhereUniqueInput!
  data: TagUpdateDataInput!
}

input TagUpsertWithWhereUniqueNestedInput {
  where: TagWhereUniqueInput!
  update: TagUpdateDataInput!
  create: TagCreateInput!
}

input TagWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TagWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String

  """
  All values that are not equal to given value.
  """
  name_not: String

  """
  All values that are contained in given list.
  """
  name_in: [String!]

  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]

  """
  All values less than the given value.
  """
  name_lt: String

  """
  All values less than or equal the given value.
  """
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
}

input TagWhereUniqueInput {
  id: ID
  name: String
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  display: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  image: String
  location: String
  about: String
  industry: String
  fBLink: String
  instaLink: String
  linkinLink: String
  twitterLink: String
  websiteLink: String
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  accountConfirmed: Boolean
  confirmToken: String
  confirmExpiry: Float
  permissions: [Permission!]!
  myQuestions(
    where: QuestionWhereInput
    orderBy: QuestionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Question!]
  myAnswers(
    where: AnswerWhereInput
    orderBy: AnswerOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Answer!]
  myBookMarks(
    where: BookMarkWhereInput
    orderBy: BookMarkOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [BookMark!]
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  display: String!
  image: String
  location: String
  about: String
  industry: String
  fBLink: String
  instaLink: String
  linkinLink: String
  twitterLink: String
  websiteLink: String
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  accountConfirmed: Boolean
  confirmToken: String
  confirmExpiry: Float
  permissions: UserCreatepermissionsInput
  myQuestions: QuestionCreateManyWithoutAskedByInput
  myAnswers: AnswerCreateManyWithoutAnsweredByInput
  myBookMarks: BookMarkCreateManyWithoutMarkedByInput
}

input UserCreateManyWithoutMyQuestionsInput {
  create: [UserCreateWithoutMyQuestionsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutMyAnswersInput {
  create: UserCreateWithoutMyAnswersInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutMyBookMarksInput {
  create: UserCreateWithoutMyBookMarksInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

input UserCreateWithoutMyAnswersInput {
  id: ID
  name: String!
  email: String!
  display: String!
  image: String
  location: String
  about: String
  industry: String
  fBLink: String
  instaLink: String
  linkinLink: String
  twitterLink: String
  websiteLink: String
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  accountConfirmed: Boolean
  confirmToken: String
  confirmExpiry: Float
  permissions: UserCreatepermissionsInput
  myQuestions: QuestionCreateManyWithoutAskedByInput
  myBookMarks: BookMarkCreateManyWithoutMarkedByInput
}

input UserCreateWithoutMyBookMarksInput {
  id: ID
  name: String!
  email: String!
  display: String!
  image: String
  location: String
  about: String
  industry: String
  fBLink: String
  instaLink: String
  linkinLink: String
  twitterLink: String
  websiteLink: String
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  accountConfirmed: Boolean
  confirmToken: String
  confirmExpiry: Float
  permissions: UserCreatepermissionsInput
  myQuestions: QuestionCreateManyWithoutAskedByInput
  myAnswers: AnswerCreateManyWithoutAnsweredByInput
}

input UserCreateWithoutMyQuestionsInput {
  id: ID
  name: String!
  email: String!
  display: String!
  image: String
  location: String
  about: String
  industry: String
  fBLink: String
  instaLink: String
  linkinLink: String
  twitterLink: String
  websiteLink: String
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  accountConfirmed: Boolean
  confirmToken: String
  confirmExpiry: Float
  permissions: UserCreatepermissionsInput
  myAnswers: AnswerCreateManyWithoutAnsweredByInput
  myBookMarks: BookMarkCreateManyWithoutMarkedByInput
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  display_ASC
  display_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  image_ASC
  image_DESC
  location_ASC
  location_DESC
  about_ASC
  about_DESC
  industry_ASC
  industry_DESC
  fBLink_ASC
  fBLink_DESC
  instaLink_ASC
  instaLink_DESC
  linkinLink_ASC
  linkinLink_DESC
  twitterLink_ASC
  twitterLink_DESC
  websiteLink_ASC
  websiteLink_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  accountConfirmed_ASC
  accountConfirmed_DESC
  confirmToken_ASC
  confirmToken_DESC
  confirmExpiry_ASC
  confirmExpiry_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  display: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  image: String
  location: String
  about: String
  industry: String
  fBLink: String
  instaLink: String
  linkinLink: String
  twitterLink: String
  websiteLink: String
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  accountConfirmed: Boolean
  confirmToken: String
  confirmExpiry: Float
  permissions: [Permission!]!
}

input UserScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [UserScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UserScalarWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String

  """
  All values that are not equal to given value.
  """
  name_not: String

  """
  All values that are contained in given list.
  """
  name_in: [String!]

  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]

  """
  All values less than the given value.
  """
  name_lt: String

  """
  All values less than or equal the given value.
  """
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  email: String

  """
  All values that are not equal to given value.
  """
  email_not: String

  """
  All values that are contained in given list.
  """
  email_in: [String!]

  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]

  """
  All values less than the given value.
  """
  email_lt: String

  """
  All values less than or equal the given value.
  """
  email_lte: String

  """
  All values greater than the given value.
  """
  email_gt: String

  """
  All values greater than or equal the given value.
  """
  email_gte: String

  """
  All values containing the given string.
  """
  email_contains: String

  """
  All values not containing the given string.
  """
  email_not_contains: String

  """
  All values starting with the given string.
  """
  email_starts_with: String

  """
  All values not starting with the given string.
  """
  email_not_starts_with: String

  """
  All values ending with the given string.
  """
  email_ends_with: String

  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  display: String

  """
  All values that are not equal to given value.
  """
  display_not: String

  """
  All values that are contained in given list.
  """
  display_in: [String!]

  """
  All values that are not contained in given list.
  """
  display_not_in: [String!]

  """
  All values less than the given value.
  """
  display_lt: String

  """
  All values less than or equal the given value.
  """
  display_lte: String

  """
  All values greater than the given value.
  """
  display_gt: String

  """
  All values greater than or equal the given value.
  """
  display_gte: String

  """
  All values containing the given string.
  """
  display_contains: String

  """
  All values not containing the given string.
  """
  display_not_contains: String

  """
  All values starting with the given string.
  """
  display_starts_with: String

  """
  All values not starting with the given string.
  """
  display_not_starts_with: String

  """
  All values ending with the given string.
  """
  display_ends_with: String

  """
  All values not ending with the given string.
  """
  display_not_ends_with: String
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  image: String

  """
  All values that are not equal to given value.
  """
  image_not: String

  """
  All values that are contained in given list.
  """
  image_in: [String!]

  """
  All values that are not contained in given list.
  """
  image_not_in: [String!]

  """
  All values less than the given value.
  """
  image_lt: String

  """
  All values less than or equal the given value.
  """
  image_lte: String

  """
  All values greater than the given value.
  """
  image_gt: String

  """
  All values greater than or equal the given value.
  """
  image_gte: String

  """
  All values containing the given string.
  """
  image_contains: String

  """
  All values not containing the given string.
  """
  image_not_contains: String

  """
  All values starting with the given string.
  """
  image_starts_with: String

  """
  All values not starting with the given string.
  """
  image_not_starts_with: String

  """
  All values ending with the given string.
  """
  image_ends_with: String

  """
  All values not ending with the given string.
  """
  image_not_ends_with: String
  location: String

  """
  All values that are not equal to given value.
  """
  location_not: String

  """
  All values that are contained in given list.
  """
  location_in: [String!]

  """
  All values that are not contained in given list.
  """
  location_not_in: [String!]

  """
  All values less than the given value.
  """
  location_lt: String

  """
  All values less than or equal the given value.
  """
  location_lte: String

  """
  All values greater than the given value.
  """
  location_gt: String

  """
  All values greater than or equal the given value.
  """
  location_gte: String

  """
  All values containing the given string.
  """
  location_contains: String

  """
  All values not containing the given string.
  """
  location_not_contains: String

  """
  All values starting with the given string.
  """
  location_starts_with: String

  """
  All values not starting with the given string.
  """
  location_not_starts_with: String

  """
  All values ending with the given string.
  """
  location_ends_with: String

  """
  All values not ending with the given string.
  """
  location_not_ends_with: String
  about: String

  """
  All values that are not equal to given value.
  """
  about_not: String

  """
  All values that are contained in given list.
  """
  about_in: [String!]

  """
  All values that are not contained in given list.
  """
  about_not_in: [String!]

  """
  All values less than the given value.
  """
  about_lt: String

  """
  All values less than or equal the given value.
  """
  about_lte: String

  """
  All values greater than the given value.
  """
  about_gt: String

  """
  All values greater than or equal the given value.
  """
  about_gte: String

  """
  All values containing the given string.
  """
  about_contains: String

  """
  All values not containing the given string.
  """
  about_not_contains: String

  """
  All values starting with the given string.
  """
  about_starts_with: String

  """
  All values not starting with the given string.
  """
  about_not_starts_with: String

  """
  All values ending with the given string.
  """
  about_ends_with: String

  """
  All values not ending with the given string.
  """
  about_not_ends_with: String
  industry: String

  """
  All values that are not equal to given value.
  """
  industry_not: String

  """
  All values that are contained in given list.
  """
  industry_in: [String!]

  """
  All values that are not contained in given list.
  """
  industry_not_in: [String!]

  """
  All values less than the given value.
  """
  industry_lt: String

  """
  All values less than or equal the given value.
  """
  industry_lte: String

  """
  All values greater than the given value.
  """
  industry_gt: String

  """
  All values greater than or equal the given value.
  """
  industry_gte: String

  """
  All values containing the given string.
  """
  industry_contains: String

  """
  All values not containing the given string.
  """
  industry_not_contains: String

  """
  All values starting with the given string.
  """
  industry_starts_with: String

  """
  All values not starting with the given string.
  """
  industry_not_starts_with: String

  """
  All values ending with the given string.
  """
  industry_ends_with: String

  """
  All values not ending with the given string.
  """
  industry_not_ends_with: String
  fBLink: String

  """
  All values that are not equal to given value.
  """
  fBLink_not: String

  """
  All values that are contained in given list.
  """
  fBLink_in: [String!]

  """
  All values that are not contained in given list.
  """
  fBLink_not_in: [String!]

  """
  All values less than the given value.
  """
  fBLink_lt: String

  """
  All values less than or equal the given value.
  """
  fBLink_lte: String

  """
  All values greater than the given value.
  """
  fBLink_gt: String

  """
  All values greater than or equal the given value.
  """
  fBLink_gte: String

  """
  All values containing the given string.
  """
  fBLink_contains: String

  """
  All values not containing the given string.
  """
  fBLink_not_contains: String

  """
  All values starting with the given string.
  """
  fBLink_starts_with: String

  """
  All values not starting with the given string.
  """
  fBLink_not_starts_with: String

  """
  All values ending with the given string.
  """
  fBLink_ends_with: String

  """
  All values not ending with the given string.
  """
  fBLink_not_ends_with: String
  instaLink: String

  """
  All values that are not equal to given value.
  """
  instaLink_not: String

  """
  All values that are contained in given list.
  """
  instaLink_in: [String!]

  """
  All values that are not contained in given list.
  """
  instaLink_not_in: [String!]

  """
  All values less than the given value.
  """
  instaLink_lt: String

  """
  All values less than or equal the given value.
  """
  instaLink_lte: String

  """
  All values greater than the given value.
  """
  instaLink_gt: String

  """
  All values greater than or equal the given value.
  """
  instaLink_gte: String

  """
  All values containing the given string.
  """
  instaLink_contains: String

  """
  All values not containing the given string.
  """
  instaLink_not_contains: String

  """
  All values starting with the given string.
  """
  instaLink_starts_with: String

  """
  All values not starting with the given string.
  """
  instaLink_not_starts_with: String

  """
  All values ending with the given string.
  """
  instaLink_ends_with: String

  """
  All values not ending with the given string.
  """
  instaLink_not_ends_with: String
  linkinLink: String

  """
  All values that are not equal to given value.
  """
  linkinLink_not: String

  """
  All values that are contained in given list.
  """
  linkinLink_in: [String!]

  """
  All values that are not contained in given list.
  """
  linkinLink_not_in: [String!]

  """
  All values less than the given value.
  """
  linkinLink_lt: String

  """
  All values less than or equal the given value.
  """
  linkinLink_lte: String

  """
  All values greater than the given value.
  """
  linkinLink_gt: String

  """
  All values greater than or equal the given value.
  """
  linkinLink_gte: String

  """
  All values containing the given string.
  """
  linkinLink_contains: String

  """
  All values not containing the given string.
  """
  linkinLink_not_contains: String

  """
  All values starting with the given string.
  """
  linkinLink_starts_with: String

  """
  All values not starting with the given string.
  """
  linkinLink_not_starts_with: String

  """
  All values ending with the given string.
  """
  linkinLink_ends_with: String

  """
  All values not ending with the given string.
  """
  linkinLink_not_ends_with: String
  twitterLink: String

  """
  All values that are not equal to given value.
  """
  twitterLink_not: String

  """
  All values that are contained in given list.
  """
  twitterLink_in: [String!]

  """
  All values that are not contained in given list.
  """
  twitterLink_not_in: [String!]

  """
  All values less than the given value.
  """
  twitterLink_lt: String

  """
  All values less than or equal the given value.
  """
  twitterLink_lte: String

  """
  All values greater than the given value.
  """
  twitterLink_gt: String

  """
  All values greater than or equal the given value.
  """
  twitterLink_gte: String

  """
  All values containing the given string.
  """
  twitterLink_contains: String

  """
  All values not containing the given string.
  """
  twitterLink_not_contains: String

  """
  All values starting with the given string.
  """
  twitterLink_starts_with: String

  """
  All values not starting with the given string.
  """
  twitterLink_not_starts_with: String

  """
  All values ending with the given string.
  """
  twitterLink_ends_with: String

  """
  All values not ending with the given string.
  """
  twitterLink_not_ends_with: String
  websiteLink: String

  """
  All values that are not equal to given value.
  """
  websiteLink_not: String

  """
  All values that are contained in given list.
  """
  websiteLink_in: [String!]

  """
  All values that are not contained in given list.
  """
  websiteLink_not_in: [String!]

  """
  All values less than the given value.
  """
  websiteLink_lt: String

  """
  All values less than or equal the given value.
  """
  websiteLink_lte: String

  """
  All values greater than the given value.
  """
  websiteLink_gt: String

  """
  All values greater than or equal the given value.
  """
  websiteLink_gte: String

  """
  All values containing the given string.
  """
  websiteLink_contains: String

  """
  All values not containing the given string.
  """
  websiteLink_not_contains: String

  """
  All values starting with the given string.
  """
  websiteLink_starts_with: String

  """
  All values not starting with the given string.
  """
  websiteLink_not_starts_with: String

  """
  All values ending with the given string.
  """
  websiteLink_ends_with: String

  """
  All values not ending with the given string.
  """
  websiteLink_not_ends_with: String
  password: String

  """
  All values that are not equal to given value.
  """
  password_not: String

  """
  All values that are contained in given list.
  """
  password_in: [String!]

  """
  All values that are not contained in given list.
  """
  password_not_in: [String!]

  """
  All values less than the given value.
  """
  password_lt: String

  """
  All values less than or equal the given value.
  """
  password_lte: String

  """
  All values greater than the given value.
  """
  password_gt: String

  """
  All values greater than or equal the given value.
  """
  password_gte: String

  """
  All values containing the given string.
  """
  password_contains: String

  """
  All values not containing the given string.
  """
  password_not_contains: String

  """
  All values starting with the given string.
  """
  password_starts_with: String

  """
  All values not starting with the given string.
  """
  password_not_starts_with: String

  """
  All values ending with the given string.
  """
  password_ends_with: String

  """
  All values not ending with the given string.
  """
  password_not_ends_with: String
  resetToken: String

  """
  All values that are not equal to given value.
  """
  resetToken_not: String

  """
  All values that are contained in given list.
  """
  resetToken_in: [String!]

  """
  All values that are not contained in given list.
  """
  resetToken_not_in: [String!]

  """
  All values less than the given value.
  """
  resetToken_lt: String

  """
  All values less than or equal the given value.
  """
  resetToken_lte: String

  """
  All values greater than the given value.
  """
  resetToken_gt: String

  """
  All values greater than or equal the given value.
  """
  resetToken_gte: String

  """
  All values containing the given string.
  """
  resetToken_contains: String

  """
  All values not containing the given string.
  """
  resetToken_not_contains: String

  """
  All values starting with the given string.
  """
  resetToken_starts_with: String

  """
  All values not starting with the given string.
  """
  resetToken_not_starts_with: String

  """
  All values ending with the given string.
  """
  resetToken_ends_with: String

  """
  All values not ending with the given string.
  """
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """
  All values that are not equal to given value.
  """
  resetTokenExpiry_not: Float

  """
  All values that are contained in given list.
  """
  resetTokenExpiry_in: [Float!]

  """
  All values that are not contained in given list.
  """
  resetTokenExpiry_not_in: [Float!]

  """
  All values less than the given value.
  """
  resetTokenExpiry_lt: Float

  """
  All values less than or equal the given value.
  """
  resetTokenExpiry_lte: Float

  """
  All values greater than the given value.
  """
  resetTokenExpiry_gt: Float

  """
  All values greater than or equal the given value.
  """
  resetTokenExpiry_gte: Float
  accountConfirmed: Boolean

  """
  All values that are not equal to given value.
  """
  accountConfirmed_not: Boolean
  confirmToken: String

  """
  All values that are not equal to given value.
  """
  confirmToken_not: String

  """
  All values that are contained in given list.
  """
  confirmToken_in: [String!]

  """
  All values that are not contained in given list.
  """
  confirmToken_not_in: [String!]

  """
  All values less than the given value.
  """
  confirmToken_lt: String

  """
  All values less than or equal the given value.
  """
  confirmToken_lte: String

  """
  All values greater than the given value.
  """
  confirmToken_gt: String

  """
  All values greater than or equal the given value.
  """
  confirmToken_gte: String

  """
  All values containing the given string.
  """
  confirmToken_contains: String

  """
  All values not containing the given string.
  """
  confirmToken_not_contains: String

  """
  All values starting with the given string.
  """
  confirmToken_starts_with: String

  """
  All values not starting with the given string.
  """
  confirmToken_not_starts_with: String

  """
  All values ending with the given string.
  """
  confirmToken_ends_with: String

  """
  All values not ending with the given string.
  """
  confirmToken_not_ends_with: String
  confirmExpiry: Float

  """
  All values that are not equal to given value.
  """
  confirmExpiry_not: Float

  """
  All values that are contained in given list.
  """
  confirmExpiry_in: [Float!]

  """
  All values that are not contained in given list.
  """
  confirmExpiry_not_in: [Float!]

  """
  All values less than the given value.
  """
  confirmExpiry_lt: Float

  """
  All values less than or equal the given value.
  """
  confirmExpiry_lte: Float

  """
  All values greater than the given value.
  """
  confirmExpiry_gt: Float

  """
  All values greater than or equal the given value.
  """
  confirmExpiry_gte: Float
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  name: String
  email: String
  display: String
  image: String
  location: String
  about: String
  industry: String
  fBLink: String
  instaLink: String
  linkinLink: String
  twitterLink: String
  websiteLink: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  accountConfirmed: Boolean
  confirmToken: String
  confirmExpiry: Float
  permissions: UserUpdatepermissionsInput
  myQuestions: QuestionUpdateManyWithoutAskedByInput
  myAnswers: AnswerUpdateManyWithoutAnsweredByInput
  myBookMarks: BookMarkUpdateManyWithoutMarkedByInput
}

input UserUpdateInput {
  name: String
  email: String
  display: String
  image: String
  location: String
  about: String
  industry: String
  fBLink: String
  instaLink: String
  linkinLink: String
  twitterLink: String
  websiteLink: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  accountConfirmed: Boolean
  confirmToken: String
  confirmExpiry: Float
  permissions: UserUpdatepermissionsInput
  myQuestions: QuestionUpdateManyWithoutAskedByInput
  myAnswers: AnswerUpdateManyWithoutAnsweredByInput
  myBookMarks: BookMarkUpdateManyWithoutMarkedByInput
}

input UserUpdateManyDataInput {
  name: String
  email: String
  display: String
  image: String
  location: String
  about: String
  industry: String
  fBLink: String
  instaLink: String
  linkinLink: String
  twitterLink: String
  websiteLink: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  accountConfirmed: Boolean
  confirmToken: String
  confirmExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  display: String
  image: String
  location: String
  about: String
  industry: String
  fBLink: String
  instaLink: String
  linkinLink: String
  twitterLink: String
  websiteLink: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  accountConfirmed: Boolean
  confirmToken: String
  confirmExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpdateManyWithoutMyQuestionsInput {
  create: [UserCreateWithoutMyQuestionsInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutMyQuestionsInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutMyQuestionsInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutMyAnswersInput {
  create: UserCreateWithoutMyAnswersInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutMyAnswersDataInput
  upsert: UserUpsertWithoutMyAnswersInput
}

input UserUpdateOneRequiredWithoutMyBookMarksInput {
  create: UserCreateWithoutMyBookMarksInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutMyBookMarksDataInput
  upsert: UserUpsertWithoutMyBookMarksInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserUpdateWithoutMyAnswersDataInput {
  name: String
  email: String
  display: String
  image: String
  location: String
  about: String
  industry: String
  fBLink: String
  instaLink: String
  linkinLink: String
  twitterLink: String
  websiteLink: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  accountConfirmed: Boolean
  confirmToken: String
  confirmExpiry: Float
  permissions: UserUpdatepermissionsInput
  myQuestions: QuestionUpdateManyWithoutAskedByInput
  myBookMarks: BookMarkUpdateManyWithoutMarkedByInput
}

input UserUpdateWithoutMyBookMarksDataInput {
  name: String
  email: String
  display: String
  image: String
  location: String
  about: String
  industry: String
  fBLink: String
  instaLink: String
  linkinLink: String
  twitterLink: String
  websiteLink: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  accountConfirmed: Boolean
  confirmToken: String
  confirmExpiry: Float
  permissions: UserUpdatepermissionsInput
  myQuestions: QuestionUpdateManyWithoutAskedByInput
  myAnswers: AnswerUpdateManyWithoutAnsweredByInput
}

input UserUpdateWithoutMyQuestionsDataInput {
  name: String
  email: String
  display: String
  image: String
  location: String
  about: String
  industry: String
  fBLink: String
  instaLink: String
  linkinLink: String
  twitterLink: String
  websiteLink: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  accountConfirmed: Boolean
  confirmToken: String
  confirmExpiry: Float
  permissions: UserUpdatepermissionsInput
  myAnswers: AnswerUpdateManyWithoutAnsweredByInput
  myBookMarks: BookMarkUpdateManyWithoutMarkedByInput
}

input UserUpdateWithWhereUniqueWithoutMyQuestionsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutMyQuestionsDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutMyAnswersInput {
  update: UserUpdateWithoutMyAnswersDataInput!
  create: UserCreateWithoutMyAnswersInput!
}

input UserUpsertWithoutMyBookMarksInput {
  update: UserUpdateWithoutMyBookMarksDataInput!
  create: UserCreateWithoutMyBookMarksInput!
}

input UserUpsertWithWhereUniqueWithoutMyQuestionsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutMyQuestionsDataInput!
  create: UserCreateWithoutMyQuestionsInput!
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String

  """
  All values that are not equal to given value.
  """
  name_not: String

  """
  All values that are contained in given list.
  """
  name_in: [String!]

  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]

  """
  All values less than the given value.
  """
  name_lt: String

  """
  All values less than or equal the given value.
  """
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  email: String

  """
  All values that are not equal to given value.
  """
  email_not: String

  """
  All values that are contained in given list.
  """
  email_in: [String!]

  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]

  """
  All values less than the given value.
  """
  email_lt: String

  """
  All values less than or equal the given value.
  """
  email_lte: String

  """
  All values greater than the given value.
  """
  email_gt: String

  """
  All values greater than or equal the given value.
  """
  email_gte: String

  """
  All values containing the given string.
  """
  email_contains: String

  """
  All values not containing the given string.
  """
  email_not_contains: String

  """
  All values starting with the given string.
  """
  email_starts_with: String

  """
  All values not starting with the given string.
  """
  email_not_starts_with: String

  """
  All values ending with the given string.
  """
  email_ends_with: String

  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  display: String

  """
  All values that are not equal to given value.
  """
  display_not: String

  """
  All values that are contained in given list.
  """
  display_in: [String!]

  """
  All values that are not contained in given list.
  """
  display_not_in: [String!]

  """
  All values less than the given value.
  """
  display_lt: String

  """
  All values less than or equal the given value.
  """
  display_lte: String

  """
  All values greater than the given value.
  """
  display_gt: String

  """
  All values greater than or equal the given value.
  """
  display_gte: String

  """
  All values containing the given string.
  """
  display_contains: String

  """
  All values not containing the given string.
  """
  display_not_contains: String

  """
  All values starting with the given string.
  """
  display_starts_with: String

  """
  All values not starting with the given string.
  """
  display_not_starts_with: String

  """
  All values ending with the given string.
  """
  display_ends_with: String

  """
  All values not ending with the given string.
  """
  display_not_ends_with: String
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  image: String

  """
  All values that are not equal to given value.
  """
  image_not: String

  """
  All values that are contained in given list.
  """
  image_in: [String!]

  """
  All values that are not contained in given list.
  """
  image_not_in: [String!]

  """
  All values less than the given value.
  """
  image_lt: String

  """
  All values less than or equal the given value.
  """
  image_lte: String

  """
  All values greater than the given value.
  """
  image_gt: String

  """
  All values greater than or equal the given value.
  """
  image_gte: String

  """
  All values containing the given string.
  """
  image_contains: String

  """
  All values not containing the given string.
  """
  image_not_contains: String

  """
  All values starting with the given string.
  """
  image_starts_with: String

  """
  All values not starting with the given string.
  """
  image_not_starts_with: String

  """
  All values ending with the given string.
  """
  image_ends_with: String

  """
  All values not ending with the given string.
  """
  image_not_ends_with: String
  location: String

  """
  All values that are not equal to given value.
  """
  location_not: String

  """
  All values that are contained in given list.
  """
  location_in: [String!]

  """
  All values that are not contained in given list.
  """
  location_not_in: [String!]

  """
  All values less than the given value.
  """
  location_lt: String

  """
  All values less than or equal the given value.
  """
  location_lte: String

  """
  All values greater than the given value.
  """
  location_gt: String

  """
  All values greater than or equal the given value.
  """
  location_gte: String

  """
  All values containing the given string.
  """
  location_contains: String

  """
  All values not containing the given string.
  """
  location_not_contains: String

  """
  All values starting with the given string.
  """
  location_starts_with: String

  """
  All values not starting with the given string.
  """
  location_not_starts_with: String

  """
  All values ending with the given string.
  """
  location_ends_with: String

  """
  All values not ending with the given string.
  """
  location_not_ends_with: String
  about: String

  """
  All values that are not equal to given value.
  """
  about_not: String

  """
  All values that are contained in given list.
  """
  about_in: [String!]

  """
  All values that are not contained in given list.
  """
  about_not_in: [String!]

  """
  All values less than the given value.
  """
  about_lt: String

  """
  All values less than or equal the given value.
  """
  about_lte: String

  """
  All values greater than the given value.
  """
  about_gt: String

  """
  All values greater than or equal the given value.
  """
  about_gte: String

  """
  All values containing the given string.
  """
  about_contains: String

  """
  All values not containing the given string.
  """
  about_not_contains: String

  """
  All values starting with the given string.
  """
  about_starts_with: String

  """
  All values not starting with the given string.
  """
  about_not_starts_with: String

  """
  All values ending with the given string.
  """
  about_ends_with: String

  """
  All values not ending with the given string.
  """
  about_not_ends_with: String
  industry: String

  """
  All values that are not equal to given value.
  """
  industry_not: String

  """
  All values that are contained in given list.
  """
  industry_in: [String!]

  """
  All values that are not contained in given list.
  """
  industry_not_in: [String!]

  """
  All values less than the given value.
  """
  industry_lt: String

  """
  All values less than or equal the given value.
  """
  industry_lte: String

  """
  All values greater than the given value.
  """
  industry_gt: String

  """
  All values greater than or equal the given value.
  """
  industry_gte: String

  """
  All values containing the given string.
  """
  industry_contains: String

  """
  All values not containing the given string.
  """
  industry_not_contains: String

  """
  All values starting with the given string.
  """
  industry_starts_with: String

  """
  All values not starting with the given string.
  """
  industry_not_starts_with: String

  """
  All values ending with the given string.
  """
  industry_ends_with: String

  """
  All values not ending with the given string.
  """
  industry_not_ends_with: String
  fBLink: String

  """
  All values that are not equal to given value.
  """
  fBLink_not: String

  """
  All values that are contained in given list.
  """
  fBLink_in: [String!]

  """
  All values that are not contained in given list.
  """
  fBLink_not_in: [String!]

  """
  All values less than the given value.
  """
  fBLink_lt: String

  """
  All values less than or equal the given value.
  """
  fBLink_lte: String

  """
  All values greater than the given value.
  """
  fBLink_gt: String

  """
  All values greater than or equal the given value.
  """
  fBLink_gte: String

  """
  All values containing the given string.
  """
  fBLink_contains: String

  """
  All values not containing the given string.
  """
  fBLink_not_contains: String

  """
  All values starting with the given string.
  """
  fBLink_starts_with: String

  """
  All values not starting with the given string.
  """
  fBLink_not_starts_with: String

  """
  All values ending with the given string.
  """
  fBLink_ends_with: String

  """
  All values not ending with the given string.
  """
  fBLink_not_ends_with: String
  instaLink: String

  """
  All values that are not equal to given value.
  """
  instaLink_not: String

  """
  All values that are contained in given list.
  """
  instaLink_in: [String!]

  """
  All values that are not contained in given list.
  """
  instaLink_not_in: [String!]

  """
  All values less than the given value.
  """
  instaLink_lt: String

  """
  All values less than or equal the given value.
  """
  instaLink_lte: String

  """
  All values greater than the given value.
  """
  instaLink_gt: String

  """
  All values greater than or equal the given value.
  """
  instaLink_gte: String

  """
  All values containing the given string.
  """
  instaLink_contains: String

  """
  All values not containing the given string.
  """
  instaLink_not_contains: String

  """
  All values starting with the given string.
  """
  instaLink_starts_with: String

  """
  All values not starting with the given string.
  """
  instaLink_not_starts_with: String

  """
  All values ending with the given string.
  """
  instaLink_ends_with: String

  """
  All values not ending with the given string.
  """
  instaLink_not_ends_with: String
  linkinLink: String

  """
  All values that are not equal to given value.
  """
  linkinLink_not: String

  """
  All values that are contained in given list.
  """
  linkinLink_in: [String!]

  """
  All values that are not contained in given list.
  """
  linkinLink_not_in: [String!]

  """
  All values less than the given value.
  """
  linkinLink_lt: String

  """
  All values less than or equal the given value.
  """
  linkinLink_lte: String

  """
  All values greater than the given value.
  """
  linkinLink_gt: String

  """
  All values greater than or equal the given value.
  """
  linkinLink_gte: String

  """
  All values containing the given string.
  """
  linkinLink_contains: String

  """
  All values not containing the given string.
  """
  linkinLink_not_contains: String

  """
  All values starting with the given string.
  """
  linkinLink_starts_with: String

  """
  All values not starting with the given string.
  """
  linkinLink_not_starts_with: String

  """
  All values ending with the given string.
  """
  linkinLink_ends_with: String

  """
  All values not ending with the given string.
  """
  linkinLink_not_ends_with: String
  twitterLink: String

  """
  All values that are not equal to given value.
  """
  twitterLink_not: String

  """
  All values that are contained in given list.
  """
  twitterLink_in: [String!]

  """
  All values that are not contained in given list.
  """
  twitterLink_not_in: [String!]

  """
  All values less than the given value.
  """
  twitterLink_lt: String

  """
  All values less than or equal the given value.
  """
  twitterLink_lte: String

  """
  All values greater than the given value.
  """
  twitterLink_gt: String

  """
  All values greater than or equal the given value.
  """
  twitterLink_gte: String

  """
  All values containing the given string.
  """
  twitterLink_contains: String

  """
  All values not containing the given string.
  """
  twitterLink_not_contains: String

  """
  All values starting with the given string.
  """
  twitterLink_starts_with: String

  """
  All values not starting with the given string.
  """
  twitterLink_not_starts_with: String

  """
  All values ending with the given string.
  """
  twitterLink_ends_with: String

  """
  All values not ending with the given string.
  """
  twitterLink_not_ends_with: String
  websiteLink: String

  """
  All values that are not equal to given value.
  """
  websiteLink_not: String

  """
  All values that are contained in given list.
  """
  websiteLink_in: [String!]

  """
  All values that are not contained in given list.
  """
  websiteLink_not_in: [String!]

  """
  All values less than the given value.
  """
  websiteLink_lt: String

  """
  All values less than or equal the given value.
  """
  websiteLink_lte: String

  """
  All values greater than the given value.
  """
  websiteLink_gt: String

  """
  All values greater than or equal the given value.
  """
  websiteLink_gte: String

  """
  All values containing the given string.
  """
  websiteLink_contains: String

  """
  All values not containing the given string.
  """
  websiteLink_not_contains: String

  """
  All values starting with the given string.
  """
  websiteLink_starts_with: String

  """
  All values not starting with the given string.
  """
  websiteLink_not_starts_with: String

  """
  All values ending with the given string.
  """
  websiteLink_ends_with: String

  """
  All values not ending with the given string.
  """
  websiteLink_not_ends_with: String
  password: String

  """
  All values that are not equal to given value.
  """
  password_not: String

  """
  All values that are contained in given list.
  """
  password_in: [String!]

  """
  All values that are not contained in given list.
  """
  password_not_in: [String!]

  """
  All values less than the given value.
  """
  password_lt: String

  """
  All values less than or equal the given value.
  """
  password_lte: String

  """
  All values greater than the given value.
  """
  password_gt: String

  """
  All values greater than or equal the given value.
  """
  password_gte: String

  """
  All values containing the given string.
  """
  password_contains: String

  """
  All values not containing the given string.
  """
  password_not_contains: String

  """
  All values starting with the given string.
  """
  password_starts_with: String

  """
  All values not starting with the given string.
  """
  password_not_starts_with: String

  """
  All values ending with the given string.
  """
  password_ends_with: String

  """
  All values not ending with the given string.
  """
  password_not_ends_with: String
  resetToken: String

  """
  All values that are not equal to given value.
  """
  resetToken_not: String

  """
  All values that are contained in given list.
  """
  resetToken_in: [String!]

  """
  All values that are not contained in given list.
  """
  resetToken_not_in: [String!]

  """
  All values less than the given value.
  """
  resetToken_lt: String

  """
  All values less than or equal the given value.
  """
  resetToken_lte: String

  """
  All values greater than the given value.
  """
  resetToken_gt: String

  """
  All values greater than or equal the given value.
  """
  resetToken_gte: String

  """
  All values containing the given string.
  """
  resetToken_contains: String

  """
  All values not containing the given string.
  """
  resetToken_not_contains: String

  """
  All values starting with the given string.
  """
  resetToken_starts_with: String

  """
  All values not starting with the given string.
  """
  resetToken_not_starts_with: String

  """
  All values ending with the given string.
  """
  resetToken_ends_with: String

  """
  All values not ending with the given string.
  """
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """
  All values that are not equal to given value.
  """
  resetTokenExpiry_not: Float

  """
  All values that are contained in given list.
  """
  resetTokenExpiry_in: [Float!]

  """
  All values that are not contained in given list.
  """
  resetTokenExpiry_not_in: [Float!]

  """
  All values less than the given value.
  """
  resetTokenExpiry_lt: Float

  """
  All values less than or equal the given value.
  """
  resetTokenExpiry_lte: Float

  """
  All values greater than the given value.
  """
  resetTokenExpiry_gt: Float

  """
  All values greater than or equal the given value.
  """
  resetTokenExpiry_gte: Float
  accountConfirmed: Boolean

  """
  All values that are not equal to given value.
  """
  accountConfirmed_not: Boolean
  confirmToken: String

  """
  All values that are not equal to given value.
  """
  confirmToken_not: String

  """
  All values that are contained in given list.
  """
  confirmToken_in: [String!]

  """
  All values that are not contained in given list.
  """
  confirmToken_not_in: [String!]

  """
  All values less than the given value.
  """
  confirmToken_lt: String

  """
  All values less than or equal the given value.
  """
  confirmToken_lte: String

  """
  All values greater than the given value.
  """
  confirmToken_gt: String

  """
  All values greater than or equal the given value.
  """
  confirmToken_gte: String

  """
  All values containing the given string.
  """
  confirmToken_contains: String

  """
  All values not containing the given string.
  """
  confirmToken_not_contains: String

  """
  All values starting with the given string.
  """
  confirmToken_starts_with: String

  """
  All values not starting with the given string.
  """
  confirmToken_not_starts_with: String

  """
  All values ending with the given string.
  """
  confirmToken_ends_with: String

  """
  All values not ending with the given string.
  """
  confirmToken_not_ends_with: String
  confirmExpiry: Float

  """
  All values that are not equal to given value.
  """
  confirmExpiry_not: Float

  """
  All values that are contained in given list.
  """
  confirmExpiry_in: [Float!]

  """
  All values that are not contained in given list.
  """
  confirmExpiry_not_in: [Float!]

  """
  All values less than the given value.
  """
  confirmExpiry_lt: Float

  """
  All values less than or equal the given value.
  """
  confirmExpiry_lte: Float

  """
  All values greater than the given value.
  """
  confirmExpiry_gt: Float

  """
  All values greater than or equal the given value.
  """
  confirmExpiry_gte: Float
  myQuestions_some: QuestionWhereInput
  myAnswers_some: AnswerWhereInput
  myBookMarks_some: BookMarkWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
  display: String
}
