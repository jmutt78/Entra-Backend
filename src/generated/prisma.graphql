type AggregateAnswer {
  count: Int!
}

type AggregateAnswerVote {
  count: Int!
}

type AggregateBookMark {
  count: Int!
}

type AggregateBusinessIdea {
  count: Int!
}

type AggregateBusinessIdeaVote {
  count: Int!
}

type AggregateMastery {
  count: Int!
}

type AggregateQuestion {
  count: Int!
}

type AggregateQuestionView {
  count: Int!
}

type AggregateQuestionVote {
  count: Int!
}

type AggregateTag {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Answer {
  id: ID!
  body: String!
  answeredBy: User!
  answeredTo(
    where: QuestionWhereInput
    orderBy: QuestionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Question!]
  approval: Boolean
  selected: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
  answerVote(
    where: AnswerVoteWhereInput
    orderBy: AnswerVoteOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [AnswerVote!]
}

type AnswerConnection {
  pageInfo: PageInfo!
  edges: [AnswerEdge]!
  aggregate: AggregateAnswer!
}

input AnswerCreateInput {
  id: ID
  body: String!
  answeredBy: UserCreateOneWithoutMyAnswersInput!
  answeredTo: QuestionCreateManyWithoutAnswersInput
  approval: Boolean
  selected: Boolean
  answerVote: AnswerVoteCreateManyWithoutVotedAnswerInput
}

input AnswerCreateManyWithoutAnsweredByInput {
  create: [AnswerCreateWithoutAnsweredByInput!]
  connect: [AnswerWhereUniqueInput!]
}

input AnswerCreateManyWithoutAnsweredToInput {
  create: [AnswerCreateWithoutAnsweredToInput!]
  connect: [AnswerWhereUniqueInput!]
}

input AnswerCreateOneWithoutAnswerVoteInput {
  create: AnswerCreateWithoutAnswerVoteInput
  connect: AnswerWhereUniqueInput
}

input AnswerCreateWithoutAnsweredByInput {
  id: ID
  body: String!
  answeredTo: QuestionCreateManyWithoutAnswersInput
  approval: Boolean
  selected: Boolean
  answerVote: AnswerVoteCreateManyWithoutVotedAnswerInput
}

input AnswerCreateWithoutAnsweredToInput {
  id: ID
  body: String!
  answeredBy: UserCreateOneWithoutMyAnswersInput!
  approval: Boolean
  selected: Boolean
  answerVote: AnswerVoteCreateManyWithoutVotedAnswerInput
}

input AnswerCreateWithoutAnswerVoteInput {
  id: ID
  body: String!
  answeredBy: UserCreateOneWithoutMyAnswersInput!
  answeredTo: QuestionCreateManyWithoutAnswersInput
  approval: Boolean
  selected: Boolean
}

type AnswerEdge {
  node: Answer!
  cursor: String!
}

enum AnswerOrderByInput {
  id_ASC
  id_DESC
  body_ASC
  body_DESC
  approval_ASC
  approval_DESC
  selected_ASC
  selected_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AnswerPreviousValues {
  id: ID!
  body: String!
  approval: Boolean
  selected: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

input AnswerScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  body: String
  body_not: String
  body_in: [String!]
  body_not_in: [String!]
  body_lt: String
  body_lte: String
  body_gt: String
  body_gte: String
  body_contains: String
  body_not_contains: String
  body_starts_with: String
  body_not_starts_with: String
  body_ends_with: String
  body_not_ends_with: String
  approval: Boolean
  approval_not: Boolean
  selected: Boolean
  selected_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [AnswerScalarWhereInput!]
  OR: [AnswerScalarWhereInput!]
  NOT: [AnswerScalarWhereInput!]
}

type AnswerSubscriptionPayload {
  mutation: MutationType!
  node: Answer
  updatedFields: [String!]
  previousValues: AnswerPreviousValues
}

input AnswerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AnswerWhereInput
  AND: [AnswerSubscriptionWhereInput!]
  OR: [AnswerSubscriptionWhereInput!]
  NOT: [AnswerSubscriptionWhereInput!]
}

input AnswerUpdateInput {
  body: String
  answeredBy: UserUpdateOneRequiredWithoutMyAnswersInput
  answeredTo: QuestionUpdateManyWithoutAnswersInput
  approval: Boolean
  selected: Boolean
  answerVote: AnswerVoteUpdateManyWithoutVotedAnswerInput
}

input AnswerUpdateManyDataInput {
  body: String
  approval: Boolean
  selected: Boolean
}

input AnswerUpdateManyMutationInput {
  body: String
  approval: Boolean
  selected: Boolean
}

input AnswerUpdateManyWithoutAnsweredByInput {
  create: [AnswerCreateWithoutAnsweredByInput!]
  delete: [AnswerWhereUniqueInput!]
  connect: [AnswerWhereUniqueInput!]
  set: [AnswerWhereUniqueInput!]
  disconnect: [AnswerWhereUniqueInput!]
  update: [AnswerUpdateWithWhereUniqueWithoutAnsweredByInput!]
  upsert: [AnswerUpsertWithWhereUniqueWithoutAnsweredByInput!]
  deleteMany: [AnswerScalarWhereInput!]
  updateMany: [AnswerUpdateManyWithWhereNestedInput!]
}

input AnswerUpdateManyWithoutAnsweredToInput {
  create: [AnswerCreateWithoutAnsweredToInput!]
  delete: [AnswerWhereUniqueInput!]
  connect: [AnswerWhereUniqueInput!]
  set: [AnswerWhereUniqueInput!]
  disconnect: [AnswerWhereUniqueInput!]
  update: [AnswerUpdateWithWhereUniqueWithoutAnsweredToInput!]
  upsert: [AnswerUpsertWithWhereUniqueWithoutAnsweredToInput!]
  deleteMany: [AnswerScalarWhereInput!]
  updateMany: [AnswerUpdateManyWithWhereNestedInput!]
}

input AnswerUpdateManyWithWhereNestedInput {
  where: AnswerScalarWhereInput!
  data: AnswerUpdateManyDataInput!
}

input AnswerUpdateOneRequiredWithoutAnswerVoteInput {
  create: AnswerCreateWithoutAnswerVoteInput
  update: AnswerUpdateWithoutAnswerVoteDataInput
  upsert: AnswerUpsertWithoutAnswerVoteInput
  connect: AnswerWhereUniqueInput
}

input AnswerUpdateWithoutAnsweredByDataInput {
  body: String
  answeredTo: QuestionUpdateManyWithoutAnswersInput
  approval: Boolean
  selected: Boolean
  answerVote: AnswerVoteUpdateManyWithoutVotedAnswerInput
}

input AnswerUpdateWithoutAnsweredToDataInput {
  body: String
  answeredBy: UserUpdateOneRequiredWithoutMyAnswersInput
  approval: Boolean
  selected: Boolean
  answerVote: AnswerVoteUpdateManyWithoutVotedAnswerInput
}

input AnswerUpdateWithoutAnswerVoteDataInput {
  body: String
  answeredBy: UserUpdateOneRequiredWithoutMyAnswersInput
  answeredTo: QuestionUpdateManyWithoutAnswersInput
  approval: Boolean
  selected: Boolean
}

input AnswerUpdateWithWhereUniqueWithoutAnsweredByInput {
  where: AnswerWhereUniqueInput!
  data: AnswerUpdateWithoutAnsweredByDataInput!
}

input AnswerUpdateWithWhereUniqueWithoutAnsweredToInput {
  where: AnswerWhereUniqueInput!
  data: AnswerUpdateWithoutAnsweredToDataInput!
}

input AnswerUpsertWithoutAnswerVoteInput {
  update: AnswerUpdateWithoutAnswerVoteDataInput!
  create: AnswerCreateWithoutAnswerVoteInput!
}

input AnswerUpsertWithWhereUniqueWithoutAnsweredByInput {
  where: AnswerWhereUniqueInput!
  update: AnswerUpdateWithoutAnsweredByDataInput!
  create: AnswerCreateWithoutAnsweredByInput!
}

input AnswerUpsertWithWhereUniqueWithoutAnsweredToInput {
  where: AnswerWhereUniqueInput!
  update: AnswerUpdateWithoutAnsweredToDataInput!
  create: AnswerCreateWithoutAnsweredToInput!
}

type AnswerVote {
  id: ID!
  votedBy: User!
  votedAnswer: Answer!
  vote: String
}

type AnswerVoteConnection {
  pageInfo: PageInfo!
  edges: [AnswerVoteEdge]!
  aggregate: AggregateAnswerVote!
}

input AnswerVoteCreateInput {
  id: ID
  votedBy: UserCreateOneInput!
  votedAnswer: AnswerCreateOneWithoutAnswerVoteInput!
  vote: String
}

input AnswerVoteCreateManyWithoutVotedAnswerInput {
  create: [AnswerVoteCreateWithoutVotedAnswerInput!]
  connect: [AnswerVoteWhereUniqueInput!]
}

input AnswerVoteCreateWithoutVotedAnswerInput {
  id: ID
  votedBy: UserCreateOneInput!
  vote: String
}

type AnswerVoteEdge {
  node: AnswerVote!
  cursor: String!
}

enum AnswerVoteOrderByInput {
  id_ASC
  id_DESC
  vote_ASC
  vote_DESC
}

type AnswerVotePreviousValues {
  id: ID!
  vote: String
}

input AnswerVoteScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  vote: String
  vote_not: String
  vote_in: [String!]
  vote_not_in: [String!]
  vote_lt: String
  vote_lte: String
  vote_gt: String
  vote_gte: String
  vote_contains: String
  vote_not_contains: String
  vote_starts_with: String
  vote_not_starts_with: String
  vote_ends_with: String
  vote_not_ends_with: String
  AND: [AnswerVoteScalarWhereInput!]
  OR: [AnswerVoteScalarWhereInput!]
  NOT: [AnswerVoteScalarWhereInput!]
}

type AnswerVoteSubscriptionPayload {
  mutation: MutationType!
  node: AnswerVote
  updatedFields: [String!]
  previousValues: AnswerVotePreviousValues
}

input AnswerVoteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AnswerVoteWhereInput
  AND: [AnswerVoteSubscriptionWhereInput!]
  OR: [AnswerVoteSubscriptionWhereInput!]
  NOT: [AnswerVoteSubscriptionWhereInput!]
}

input AnswerVoteUpdateInput {
  votedBy: UserUpdateOneRequiredInput
  votedAnswer: AnswerUpdateOneRequiredWithoutAnswerVoteInput
  vote: String
}

input AnswerVoteUpdateManyDataInput {
  vote: String
}

input AnswerVoteUpdateManyMutationInput {
  vote: String
}

input AnswerVoteUpdateManyWithoutVotedAnswerInput {
  create: [AnswerVoteCreateWithoutVotedAnswerInput!]
  delete: [AnswerVoteWhereUniqueInput!]
  connect: [AnswerVoteWhereUniqueInput!]
  set: [AnswerVoteWhereUniqueInput!]
  disconnect: [AnswerVoteWhereUniqueInput!]
  update: [AnswerVoteUpdateWithWhereUniqueWithoutVotedAnswerInput!]
  upsert: [AnswerVoteUpsertWithWhereUniqueWithoutVotedAnswerInput!]
  deleteMany: [AnswerVoteScalarWhereInput!]
  updateMany: [AnswerVoteUpdateManyWithWhereNestedInput!]
}

input AnswerVoteUpdateManyWithWhereNestedInput {
  where: AnswerVoteScalarWhereInput!
  data: AnswerVoteUpdateManyDataInput!
}

input AnswerVoteUpdateWithoutVotedAnswerDataInput {
  votedBy: UserUpdateOneRequiredInput
  vote: String
}

input AnswerVoteUpdateWithWhereUniqueWithoutVotedAnswerInput {
  where: AnswerVoteWhereUniqueInput!
  data: AnswerVoteUpdateWithoutVotedAnswerDataInput!
}

input AnswerVoteUpsertWithWhereUniqueWithoutVotedAnswerInput {
  where: AnswerVoteWhereUniqueInput!
  update: AnswerVoteUpdateWithoutVotedAnswerDataInput!
  create: AnswerVoteCreateWithoutVotedAnswerInput!
}

input AnswerVoteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  votedBy: UserWhereInput
  votedAnswer: AnswerWhereInput
  vote: String
  vote_not: String
  vote_in: [String!]
  vote_not_in: [String!]
  vote_lt: String
  vote_lte: String
  vote_gt: String
  vote_gte: String
  vote_contains: String
  vote_not_contains: String
  vote_starts_with: String
  vote_not_starts_with: String
  vote_ends_with: String
  vote_not_ends_with: String
  AND: [AnswerVoteWhereInput!]
  OR: [AnswerVoteWhereInput!]
  NOT: [AnswerVoteWhereInput!]
}

input AnswerVoteWhereUniqueInput {
  id: ID
}

input AnswerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  body: String
  body_not: String
  body_in: [String!]
  body_not_in: [String!]
  body_lt: String
  body_lte: String
  body_gt: String
  body_gte: String
  body_contains: String
  body_not_contains: String
  body_starts_with: String
  body_not_starts_with: String
  body_ends_with: String
  body_not_ends_with: String
  answeredBy: UserWhereInput
  answeredTo_every: QuestionWhereInput
  answeredTo_some: QuestionWhereInput
  answeredTo_none: QuestionWhereInput
  approval: Boolean
  approval_not: Boolean
  selected: Boolean
  selected_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  answerVote_every: AnswerVoteWhereInput
  answerVote_some: AnswerVoteWhereInput
  answerVote_none: AnswerVoteWhereInput
  AND: [AnswerWhereInput!]
  OR: [AnswerWhereInput!]
  NOT: [AnswerWhereInput!]
}

input AnswerWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

type BookMark {
  id: ID!
  questions(
    where: QuestionWhereInput
    orderBy: QuestionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Question!]
  markedBy: User!
}

type BookMarkConnection {
  pageInfo: PageInfo!
  edges: [BookMarkEdge]!
  aggregate: AggregateBookMark!
}

input BookMarkCreateInput {
  id: ID
  questions: QuestionCreateManyWithoutBookMarkInput
  markedBy: UserCreateOneWithoutMyBookMarksInput!
}

input BookMarkCreateManyWithoutMarkedByInput {
  create: [BookMarkCreateWithoutMarkedByInput!]
  connect: [BookMarkWhereUniqueInput!]
}

input BookMarkCreateManyWithoutQuestionsInput {
  create: [BookMarkCreateWithoutQuestionsInput!]
  connect: [BookMarkWhereUniqueInput!]
}

input BookMarkCreateWithoutMarkedByInput {
  id: ID
  questions: QuestionCreateManyWithoutBookMarkInput
}

input BookMarkCreateWithoutQuestionsInput {
  id: ID
  markedBy: UserCreateOneWithoutMyBookMarksInput!
}

type BookMarkEdge {
  node: BookMark!
  cursor: String!
}

enum BookMarkOrderByInput {
  id_ASC
  id_DESC
}

type BookMarkPreviousValues {
  id: ID!
}

input BookMarkScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [BookMarkScalarWhereInput!]
  OR: [BookMarkScalarWhereInput!]
  NOT: [BookMarkScalarWhereInput!]
}

type BookMarkSubscriptionPayload {
  mutation: MutationType!
  node: BookMark
  updatedFields: [String!]
  previousValues: BookMarkPreviousValues
}

input BookMarkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BookMarkWhereInput
  AND: [BookMarkSubscriptionWhereInput!]
  OR: [BookMarkSubscriptionWhereInput!]
  NOT: [BookMarkSubscriptionWhereInput!]
}

input BookMarkUpdateInput {
  questions: QuestionUpdateManyWithoutBookMarkInput
  markedBy: UserUpdateOneRequiredWithoutMyBookMarksInput
}

input BookMarkUpdateManyWithoutMarkedByInput {
  create: [BookMarkCreateWithoutMarkedByInput!]
  delete: [BookMarkWhereUniqueInput!]
  connect: [BookMarkWhereUniqueInput!]
  set: [BookMarkWhereUniqueInput!]
  disconnect: [BookMarkWhereUniqueInput!]
  update: [BookMarkUpdateWithWhereUniqueWithoutMarkedByInput!]
  upsert: [BookMarkUpsertWithWhereUniqueWithoutMarkedByInput!]
  deleteMany: [BookMarkScalarWhereInput!]
}

input BookMarkUpdateManyWithoutQuestionsInput {
  create: [BookMarkCreateWithoutQuestionsInput!]
  delete: [BookMarkWhereUniqueInput!]
  connect: [BookMarkWhereUniqueInput!]
  set: [BookMarkWhereUniqueInput!]
  disconnect: [BookMarkWhereUniqueInput!]
  update: [BookMarkUpdateWithWhereUniqueWithoutQuestionsInput!]
  upsert: [BookMarkUpsertWithWhereUniqueWithoutQuestionsInput!]
  deleteMany: [BookMarkScalarWhereInput!]
}

input BookMarkUpdateWithoutMarkedByDataInput {
  questions: QuestionUpdateManyWithoutBookMarkInput
}

input BookMarkUpdateWithoutQuestionsDataInput {
  markedBy: UserUpdateOneRequiredWithoutMyBookMarksInput
}

input BookMarkUpdateWithWhereUniqueWithoutMarkedByInput {
  where: BookMarkWhereUniqueInput!
  data: BookMarkUpdateWithoutMarkedByDataInput!
}

input BookMarkUpdateWithWhereUniqueWithoutQuestionsInput {
  where: BookMarkWhereUniqueInput!
  data: BookMarkUpdateWithoutQuestionsDataInput!
}

input BookMarkUpsertWithWhereUniqueWithoutMarkedByInput {
  where: BookMarkWhereUniqueInput!
  update: BookMarkUpdateWithoutMarkedByDataInput!
  create: BookMarkCreateWithoutMarkedByInput!
}

input BookMarkUpsertWithWhereUniqueWithoutQuestionsInput {
  where: BookMarkWhereUniqueInput!
  update: BookMarkUpdateWithoutQuestionsDataInput!
  create: BookMarkCreateWithoutQuestionsInput!
}

input BookMarkWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  questions_every: QuestionWhereInput
  questions_some: QuestionWhereInput
  questions_none: QuestionWhereInput
  markedBy: UserWhereInput
  AND: [BookMarkWhereInput!]
  OR: [BookMarkWhereInput!]
  NOT: [BookMarkWhereInput!]
}

input BookMarkWhereUniqueInput {
  id: ID
}

type BusinessIdea {
  id: ID!
  createdBy: User!
  createdAt: DateTime!
  updatedAt: DateTime!
  idea: String!
  problem: String
  solution: String
  customer: String
  value: String
  status: Boolean
  businessIdeaVote(
    where: BusinessIdeaVoteWhereInput
    orderBy: BusinessIdeaVoteOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [BusinessIdeaVote!]
}

type BusinessIdeaConnection {
  pageInfo: PageInfo!
  edges: [BusinessIdeaEdge]!
  aggregate: AggregateBusinessIdea!
}

input BusinessIdeaCreateInput {
  id: ID
  createdBy: UserCreateOneWithoutBusinessIdeasInput!
  idea: String!
  problem: String
  solution: String
  customer: String
  value: String
  status: Boolean
  businessIdeaVote: BusinessIdeaVoteCreateManyWithoutVotedBusinessIdeaInput
}

input BusinessIdeaCreateManyWithoutCreatedByInput {
  create: [BusinessIdeaCreateWithoutCreatedByInput!]
  connect: [BusinessIdeaWhereUniqueInput!]
}

input BusinessIdeaCreateOneWithoutBusinessIdeaVoteInput {
  create: BusinessIdeaCreateWithoutBusinessIdeaVoteInput
  connect: BusinessIdeaWhereUniqueInput
}

input BusinessIdeaCreateWithoutBusinessIdeaVoteInput {
  id: ID
  createdBy: UserCreateOneWithoutBusinessIdeasInput!
  idea: String!
  problem: String
  solution: String
  customer: String
  value: String
  status: Boolean
}

input BusinessIdeaCreateWithoutCreatedByInput {
  id: ID
  idea: String!
  problem: String
  solution: String
  customer: String
  value: String
  status: Boolean
  businessIdeaVote: BusinessIdeaVoteCreateManyWithoutVotedBusinessIdeaInput
}

type BusinessIdeaEdge {
  node: BusinessIdea!
  cursor: String!
}

enum BusinessIdeaOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  idea_ASC
  idea_DESC
  problem_ASC
  problem_DESC
  solution_ASC
  solution_DESC
  customer_ASC
  customer_DESC
  value_ASC
  value_DESC
  status_ASC
  status_DESC
}

type BusinessIdeaPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  idea: String!
  problem: String
  solution: String
  customer: String
  value: String
  status: Boolean
}

input BusinessIdeaScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  idea: String
  idea_not: String
  idea_in: [String!]
  idea_not_in: [String!]
  idea_lt: String
  idea_lte: String
  idea_gt: String
  idea_gte: String
  idea_contains: String
  idea_not_contains: String
  idea_starts_with: String
  idea_not_starts_with: String
  idea_ends_with: String
  idea_not_ends_with: String
  problem: String
  problem_not: String
  problem_in: [String!]
  problem_not_in: [String!]
  problem_lt: String
  problem_lte: String
  problem_gt: String
  problem_gte: String
  problem_contains: String
  problem_not_contains: String
  problem_starts_with: String
  problem_not_starts_with: String
  problem_ends_with: String
  problem_not_ends_with: String
  solution: String
  solution_not: String
  solution_in: [String!]
  solution_not_in: [String!]
  solution_lt: String
  solution_lte: String
  solution_gt: String
  solution_gte: String
  solution_contains: String
  solution_not_contains: String
  solution_starts_with: String
  solution_not_starts_with: String
  solution_ends_with: String
  solution_not_ends_with: String
  customer: String
  customer_not: String
  customer_in: [String!]
  customer_not_in: [String!]
  customer_lt: String
  customer_lte: String
  customer_gt: String
  customer_gte: String
  customer_contains: String
  customer_not_contains: String
  customer_starts_with: String
  customer_not_starts_with: String
  customer_ends_with: String
  customer_not_ends_with: String
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  status: Boolean
  status_not: Boolean
  AND: [BusinessIdeaScalarWhereInput!]
  OR: [BusinessIdeaScalarWhereInput!]
  NOT: [BusinessIdeaScalarWhereInput!]
}

type BusinessIdeaSubscriptionPayload {
  mutation: MutationType!
  node: BusinessIdea
  updatedFields: [String!]
  previousValues: BusinessIdeaPreviousValues
}

input BusinessIdeaSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BusinessIdeaWhereInput
  AND: [BusinessIdeaSubscriptionWhereInput!]
  OR: [BusinessIdeaSubscriptionWhereInput!]
  NOT: [BusinessIdeaSubscriptionWhereInput!]
}

input BusinessIdeaUpdateInput {
  createdBy: UserUpdateOneRequiredWithoutBusinessIdeasInput
  idea: String
  problem: String
  solution: String
  customer: String
  value: String
  status: Boolean
  businessIdeaVote: BusinessIdeaVoteUpdateManyWithoutVotedBusinessIdeaInput
}

input BusinessIdeaUpdateManyDataInput {
  idea: String
  problem: String
  solution: String
  customer: String
  value: String
  status: Boolean
}

input BusinessIdeaUpdateManyMutationInput {
  idea: String
  problem: String
  solution: String
  customer: String
  value: String
  status: Boolean
}

input BusinessIdeaUpdateManyWithoutCreatedByInput {
  create: [BusinessIdeaCreateWithoutCreatedByInput!]
  delete: [BusinessIdeaWhereUniqueInput!]
  connect: [BusinessIdeaWhereUniqueInput!]
  set: [BusinessIdeaWhereUniqueInput!]
  disconnect: [BusinessIdeaWhereUniqueInput!]
  update: [BusinessIdeaUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [BusinessIdeaUpsertWithWhereUniqueWithoutCreatedByInput!]
  deleteMany: [BusinessIdeaScalarWhereInput!]
  updateMany: [BusinessIdeaUpdateManyWithWhereNestedInput!]
}

input BusinessIdeaUpdateManyWithWhereNestedInput {
  where: BusinessIdeaScalarWhereInput!
  data: BusinessIdeaUpdateManyDataInput!
}

input BusinessIdeaUpdateOneRequiredWithoutBusinessIdeaVoteInput {
  create: BusinessIdeaCreateWithoutBusinessIdeaVoteInput
  update: BusinessIdeaUpdateWithoutBusinessIdeaVoteDataInput
  upsert: BusinessIdeaUpsertWithoutBusinessIdeaVoteInput
  connect: BusinessIdeaWhereUniqueInput
}

input BusinessIdeaUpdateWithoutBusinessIdeaVoteDataInput {
  createdBy: UserUpdateOneRequiredWithoutBusinessIdeasInput
  idea: String
  problem: String
  solution: String
  customer: String
  value: String
  status: Boolean
}

input BusinessIdeaUpdateWithoutCreatedByDataInput {
  idea: String
  problem: String
  solution: String
  customer: String
  value: String
  status: Boolean
  businessIdeaVote: BusinessIdeaVoteUpdateManyWithoutVotedBusinessIdeaInput
}

input BusinessIdeaUpdateWithWhereUniqueWithoutCreatedByInput {
  where: BusinessIdeaWhereUniqueInput!
  data: BusinessIdeaUpdateWithoutCreatedByDataInput!
}

input BusinessIdeaUpsertWithoutBusinessIdeaVoteInput {
  update: BusinessIdeaUpdateWithoutBusinessIdeaVoteDataInput!
  create: BusinessIdeaCreateWithoutBusinessIdeaVoteInput!
}

input BusinessIdeaUpsertWithWhereUniqueWithoutCreatedByInput {
  where: BusinessIdeaWhereUniqueInput!
  update: BusinessIdeaUpdateWithoutCreatedByDataInput!
  create: BusinessIdeaCreateWithoutCreatedByInput!
}

type BusinessIdeaVote {
  id: ID!
  votedBy: User!
  votedBusinessIdea: BusinessIdea!
  vote: String
}

type BusinessIdeaVoteConnection {
  pageInfo: PageInfo!
  edges: [BusinessIdeaVoteEdge]!
  aggregate: AggregateBusinessIdeaVote!
}

input BusinessIdeaVoteCreateInput {
  id: ID
  votedBy: UserCreateOneInput!
  votedBusinessIdea: BusinessIdeaCreateOneWithoutBusinessIdeaVoteInput!
  vote: String
}

input BusinessIdeaVoteCreateManyWithoutVotedBusinessIdeaInput {
  create: [BusinessIdeaVoteCreateWithoutVotedBusinessIdeaInput!]
  connect: [BusinessIdeaVoteWhereUniqueInput!]
}

input BusinessIdeaVoteCreateWithoutVotedBusinessIdeaInput {
  id: ID
  votedBy: UserCreateOneInput!
  vote: String
}

type BusinessIdeaVoteEdge {
  node: BusinessIdeaVote!
  cursor: String!
}

enum BusinessIdeaVoteOrderByInput {
  id_ASC
  id_DESC
  vote_ASC
  vote_DESC
}

type BusinessIdeaVotePreviousValues {
  id: ID!
  vote: String
}

input BusinessIdeaVoteScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  vote: String
  vote_not: String
  vote_in: [String!]
  vote_not_in: [String!]
  vote_lt: String
  vote_lte: String
  vote_gt: String
  vote_gte: String
  vote_contains: String
  vote_not_contains: String
  vote_starts_with: String
  vote_not_starts_with: String
  vote_ends_with: String
  vote_not_ends_with: String
  AND: [BusinessIdeaVoteScalarWhereInput!]
  OR: [BusinessIdeaVoteScalarWhereInput!]
  NOT: [BusinessIdeaVoteScalarWhereInput!]
}

type BusinessIdeaVoteSubscriptionPayload {
  mutation: MutationType!
  node: BusinessIdeaVote
  updatedFields: [String!]
  previousValues: BusinessIdeaVotePreviousValues
}

input BusinessIdeaVoteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BusinessIdeaVoteWhereInput
  AND: [BusinessIdeaVoteSubscriptionWhereInput!]
  OR: [BusinessIdeaVoteSubscriptionWhereInput!]
  NOT: [BusinessIdeaVoteSubscriptionWhereInput!]
}

input BusinessIdeaVoteUpdateInput {
  votedBy: UserUpdateOneRequiredInput
  votedBusinessIdea: BusinessIdeaUpdateOneRequiredWithoutBusinessIdeaVoteInput
  vote: String
}

input BusinessIdeaVoteUpdateManyDataInput {
  vote: String
}

input BusinessIdeaVoteUpdateManyMutationInput {
  vote: String
}

input BusinessIdeaVoteUpdateManyWithoutVotedBusinessIdeaInput {
  create: [BusinessIdeaVoteCreateWithoutVotedBusinessIdeaInput!]
  delete: [BusinessIdeaVoteWhereUniqueInput!]
  connect: [BusinessIdeaVoteWhereUniqueInput!]
  set: [BusinessIdeaVoteWhereUniqueInput!]
  disconnect: [BusinessIdeaVoteWhereUniqueInput!]
  update: [BusinessIdeaVoteUpdateWithWhereUniqueWithoutVotedBusinessIdeaInput!]
  upsert: [BusinessIdeaVoteUpsertWithWhereUniqueWithoutVotedBusinessIdeaInput!]
  deleteMany: [BusinessIdeaVoteScalarWhereInput!]
  updateMany: [BusinessIdeaVoteUpdateManyWithWhereNestedInput!]
}

input BusinessIdeaVoteUpdateManyWithWhereNestedInput {
  where: BusinessIdeaVoteScalarWhereInput!
  data: BusinessIdeaVoteUpdateManyDataInput!
}

input BusinessIdeaVoteUpdateWithoutVotedBusinessIdeaDataInput {
  votedBy: UserUpdateOneRequiredInput
  vote: String
}

input BusinessIdeaVoteUpdateWithWhereUniqueWithoutVotedBusinessIdeaInput {
  where: BusinessIdeaVoteWhereUniqueInput!
  data: BusinessIdeaVoteUpdateWithoutVotedBusinessIdeaDataInput!
}

input BusinessIdeaVoteUpsertWithWhereUniqueWithoutVotedBusinessIdeaInput {
  where: BusinessIdeaVoteWhereUniqueInput!
  update: BusinessIdeaVoteUpdateWithoutVotedBusinessIdeaDataInput!
  create: BusinessIdeaVoteCreateWithoutVotedBusinessIdeaInput!
}

input BusinessIdeaVoteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  votedBy: UserWhereInput
  votedBusinessIdea: BusinessIdeaWhereInput
  vote: String
  vote_not: String
  vote_in: [String!]
  vote_not_in: [String!]
  vote_lt: String
  vote_lte: String
  vote_gt: String
  vote_gte: String
  vote_contains: String
  vote_not_contains: String
  vote_starts_with: String
  vote_not_starts_with: String
  vote_ends_with: String
  vote_not_ends_with: String
  AND: [BusinessIdeaVoteWhereInput!]
  OR: [BusinessIdeaVoteWhereInput!]
  NOT: [BusinessIdeaVoteWhereInput!]
}

input BusinessIdeaVoteWhereUniqueInput {
  id: ID
}

input BusinessIdeaWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdBy: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  idea: String
  idea_not: String
  idea_in: [String!]
  idea_not_in: [String!]
  idea_lt: String
  idea_lte: String
  idea_gt: String
  idea_gte: String
  idea_contains: String
  idea_not_contains: String
  idea_starts_with: String
  idea_not_starts_with: String
  idea_ends_with: String
  idea_not_ends_with: String
  problem: String
  problem_not: String
  problem_in: [String!]
  problem_not_in: [String!]
  problem_lt: String
  problem_lte: String
  problem_gt: String
  problem_gte: String
  problem_contains: String
  problem_not_contains: String
  problem_starts_with: String
  problem_not_starts_with: String
  problem_ends_with: String
  problem_not_ends_with: String
  solution: String
  solution_not: String
  solution_in: [String!]
  solution_not_in: [String!]
  solution_lt: String
  solution_lte: String
  solution_gt: String
  solution_gte: String
  solution_contains: String
  solution_not_contains: String
  solution_starts_with: String
  solution_not_starts_with: String
  solution_ends_with: String
  solution_not_ends_with: String
  customer: String
  customer_not: String
  customer_in: [String!]
  customer_not_in: [String!]
  customer_lt: String
  customer_lte: String
  customer_gt: String
  customer_gte: String
  customer_contains: String
  customer_not_contains: String
  customer_starts_with: String
  customer_not_starts_with: String
  customer_ends_with: String
  customer_not_ends_with: String
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  status: Boolean
  status_not: Boolean
  businessIdeaVote_every: BusinessIdeaVoteWhereInput
  businessIdeaVote_some: BusinessIdeaVoteWhereInput
  businessIdeaVote_none: BusinessIdeaVoteWhereInput
  AND: [BusinessIdeaWhereInput!]
  OR: [BusinessIdeaWhereInput!]
  NOT: [BusinessIdeaWhereInput!]
}

input BusinessIdeaWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Mastery {
  id: ID!
  user: User!
  level1: Boolean
  level2: Boolean
  level3: Boolean
  level4: Boolean
}

type MasteryConnection {
  pageInfo: PageInfo!
  edges: [MasteryEdge]!
  aggregate: AggregateMastery!
}

input MasteryCreateInput {
  id: ID
  user: UserCreateOneWithoutMasterInput!
  level1: Boolean
  level2: Boolean
  level3: Boolean
  level4: Boolean
}

input MasteryCreateManyWithoutUserInput {
  create: [MasteryCreateWithoutUserInput!]
  connect: [MasteryWhereUniqueInput!]
}

input MasteryCreateWithoutUserInput {
  id: ID
  level1: Boolean
  level2: Boolean
  level3: Boolean
  level4: Boolean
}

type MasteryEdge {
  node: Mastery!
  cursor: String!
}

enum MasteryOrderByInput {
  id_ASC
  id_DESC
  level1_ASC
  level1_DESC
  level2_ASC
  level2_DESC
  level3_ASC
  level3_DESC
  level4_ASC
  level4_DESC
}

type MasteryPreviousValues {
  id: ID!
  level1: Boolean
  level2: Boolean
  level3: Boolean
  level4: Boolean
}

input MasteryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  level1: Boolean
  level1_not: Boolean
  level2: Boolean
  level2_not: Boolean
  level3: Boolean
  level3_not: Boolean
  level4: Boolean
  level4_not: Boolean
  AND: [MasteryScalarWhereInput!]
  OR: [MasteryScalarWhereInput!]
  NOT: [MasteryScalarWhereInput!]
}

type MasterySubscriptionPayload {
  mutation: MutationType!
  node: Mastery
  updatedFields: [String!]
  previousValues: MasteryPreviousValues
}

input MasterySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MasteryWhereInput
  AND: [MasterySubscriptionWhereInput!]
  OR: [MasterySubscriptionWhereInput!]
  NOT: [MasterySubscriptionWhereInput!]
}

input MasteryUpdateInput {
  user: UserUpdateOneRequiredWithoutMasterInput
  level1: Boolean
  level2: Boolean
  level3: Boolean
  level4: Boolean
}

input MasteryUpdateManyDataInput {
  level1: Boolean
  level2: Boolean
  level3: Boolean
  level4: Boolean
}

input MasteryUpdateManyMutationInput {
  level1: Boolean
  level2: Boolean
  level3: Boolean
  level4: Boolean
}

input MasteryUpdateManyWithoutUserInput {
  create: [MasteryCreateWithoutUserInput!]
  delete: [MasteryWhereUniqueInput!]
  connect: [MasteryWhereUniqueInput!]
  set: [MasteryWhereUniqueInput!]
  disconnect: [MasteryWhereUniqueInput!]
  update: [MasteryUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [MasteryUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [MasteryScalarWhereInput!]
  updateMany: [MasteryUpdateManyWithWhereNestedInput!]
}

input MasteryUpdateManyWithWhereNestedInput {
  where: MasteryScalarWhereInput!
  data: MasteryUpdateManyDataInput!
}

input MasteryUpdateWithoutUserDataInput {
  level1: Boolean
  level2: Boolean
  level3: Boolean
  level4: Boolean
}

input MasteryUpdateWithWhereUniqueWithoutUserInput {
  where: MasteryWhereUniqueInput!
  data: MasteryUpdateWithoutUserDataInput!
}

input MasteryUpsertWithWhereUniqueWithoutUserInput {
  where: MasteryWhereUniqueInput!
  update: MasteryUpdateWithoutUserDataInput!
  create: MasteryCreateWithoutUserInput!
}

input MasteryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  level1: Boolean
  level1_not: Boolean
  level2: Boolean
  level2_not: Boolean
  level3: Boolean
  level3_not: Boolean
  level4: Boolean
  level4_not: Boolean
  AND: [MasteryWhereInput!]
  OR: [MasteryWhereInput!]
  NOT: [MasteryWhereInput!]
}

input MasteryWhereUniqueInput {
  id: ID
}

type Mutation {
  createAnswer(data: AnswerCreateInput!): Answer!
  updateAnswer(data: AnswerUpdateInput!, where: AnswerWhereUniqueInput!): Answer
  updateManyAnswers(
    data: AnswerUpdateManyMutationInput!
    where: AnswerWhereInput
  ): BatchPayload!
  upsertAnswer(
    where: AnswerWhereUniqueInput!
    create: AnswerCreateInput!
    update: AnswerUpdateInput!
  ): Answer!
  deleteAnswer(where: AnswerWhereUniqueInput!): Answer
  deleteManyAnswers(where: AnswerWhereInput): BatchPayload!
  createAnswerVote(data: AnswerVoteCreateInput!): AnswerVote!
  updateAnswerVote(
    data: AnswerVoteUpdateInput!
    where: AnswerVoteWhereUniqueInput!
  ): AnswerVote
  updateManyAnswerVotes(
    data: AnswerVoteUpdateManyMutationInput!
    where: AnswerVoteWhereInput
  ): BatchPayload!
  upsertAnswerVote(
    where: AnswerVoteWhereUniqueInput!
    create: AnswerVoteCreateInput!
    update: AnswerVoteUpdateInput!
  ): AnswerVote!
  deleteAnswerVote(where: AnswerVoteWhereUniqueInput!): AnswerVote
  deleteManyAnswerVotes(where: AnswerVoteWhereInput): BatchPayload!
  createBookMark(data: BookMarkCreateInput!): BookMark!
  updateBookMark(
    data: BookMarkUpdateInput!
    where: BookMarkWhereUniqueInput!
  ): BookMark
  upsertBookMark(
    where: BookMarkWhereUniqueInput!
    create: BookMarkCreateInput!
    update: BookMarkUpdateInput!
  ): BookMark!
  deleteBookMark(where: BookMarkWhereUniqueInput!): BookMark
  deleteManyBookMarks(where: BookMarkWhereInput): BatchPayload!
  createBusinessIdea(data: BusinessIdeaCreateInput!): BusinessIdea!
  updateBusinessIdea(
    data: BusinessIdeaUpdateInput!
    where: BusinessIdeaWhereUniqueInput!
  ): BusinessIdea
  updateManyBusinessIdeas(
    data: BusinessIdeaUpdateManyMutationInput!
    where: BusinessIdeaWhereInput
  ): BatchPayload!
  upsertBusinessIdea(
    where: BusinessIdeaWhereUniqueInput!
    create: BusinessIdeaCreateInput!
    update: BusinessIdeaUpdateInput!
  ): BusinessIdea!
  deleteBusinessIdea(where: BusinessIdeaWhereUniqueInput!): BusinessIdea
  deleteManyBusinessIdeas(where: BusinessIdeaWhereInput): BatchPayload!
  createBusinessIdeaVote(data: BusinessIdeaVoteCreateInput!): BusinessIdeaVote!
  updateBusinessIdeaVote(
    data: BusinessIdeaVoteUpdateInput!
    where: BusinessIdeaVoteWhereUniqueInput!
  ): BusinessIdeaVote
  updateManyBusinessIdeaVotes(
    data: BusinessIdeaVoteUpdateManyMutationInput!
    where: BusinessIdeaVoteWhereInput
  ): BatchPayload!
  upsertBusinessIdeaVote(
    where: BusinessIdeaVoteWhereUniqueInput!
    create: BusinessIdeaVoteCreateInput!
    update: BusinessIdeaVoteUpdateInput!
  ): BusinessIdeaVote!
  deleteBusinessIdeaVote(
    where: BusinessIdeaVoteWhereUniqueInput!
  ): BusinessIdeaVote
  deleteManyBusinessIdeaVotes(where: BusinessIdeaVoteWhereInput): BatchPayload!
  createMastery(data: MasteryCreateInput!): Mastery!
  updateMastery(
    data: MasteryUpdateInput!
    where: MasteryWhereUniqueInput!
  ): Mastery
  updateManyMasteries(
    data: MasteryUpdateManyMutationInput!
    where: MasteryWhereInput
  ): BatchPayload!
  upsertMastery(
    where: MasteryWhereUniqueInput!
    create: MasteryCreateInput!
    update: MasteryUpdateInput!
  ): Mastery!
  deleteMastery(where: MasteryWhereUniqueInput!): Mastery
  deleteManyMasteries(where: MasteryWhereInput): BatchPayload!
  createQuestion(data: QuestionCreateInput!): Question!
  updateQuestion(
    data: QuestionUpdateInput!
    where: QuestionWhereUniqueInput!
  ): Question
  updateManyQuestions(
    data: QuestionUpdateManyMutationInput!
    where: QuestionWhereInput
  ): BatchPayload!
  upsertQuestion(
    where: QuestionWhereUniqueInput!
    create: QuestionCreateInput!
    update: QuestionUpdateInput!
  ): Question!
  deleteQuestion(where: QuestionWhereUniqueInput!): Question
  deleteManyQuestions(where: QuestionWhereInput): BatchPayload!
  createQuestionView(data: QuestionViewCreateInput!): QuestionView!
  updateQuestionView(
    data: QuestionViewUpdateInput!
    where: QuestionViewWhereUniqueInput!
  ): QuestionView
  upsertQuestionView(
    where: QuestionViewWhereUniqueInput!
    create: QuestionViewCreateInput!
    update: QuestionViewUpdateInput!
  ): QuestionView!
  deleteQuestionView(where: QuestionViewWhereUniqueInput!): QuestionView
  deleteManyQuestionViews(where: QuestionViewWhereInput): BatchPayload!
  createQuestionVote(data: QuestionVoteCreateInput!): QuestionVote!
  updateQuestionVote(
    data: QuestionVoteUpdateInput!
    where: QuestionVoteWhereUniqueInput!
  ): QuestionVote
  updateManyQuestionVotes(
    data: QuestionVoteUpdateManyMutationInput!
    where: QuestionVoteWhereInput
  ): BatchPayload!
  upsertQuestionVote(
    where: QuestionVoteWhereUniqueInput!
    create: QuestionVoteCreateInput!
    update: QuestionVoteUpdateInput!
  ): QuestionVote!
  deleteQuestionVote(where: QuestionVoteWhereUniqueInput!): QuestionVote
  deleteManyQuestionVotes(where: QuestionVoteWhereInput): BatchPayload!
  createTag(data: TagCreateInput!): Tag!
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateManyTags(
    data: TagUpdateManyMutationInput!
    where: TagWhereInput
  ): BatchPayload!
  upsertTag(
    where: TagWhereUniqueInput!
    create: TagCreateInput!
    update: TagUpdateInput!
  ): Tag!
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteManyTags(where: TagWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(
    data: UserUpdateManyMutationInput!
    where: UserWhereInput
  ): BatchPayload!
  upsertUser(
    where: UserWhereUniqueInput!
    create: UserCreateInput!
    update: UserUpdateInput!
  ): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

enum Permission {
  ADMIN
  USER
  MODERATOR
  PERMISSIONUPDATE
}

type Query {
  answer(where: AnswerWhereUniqueInput!): Answer
  answers(
    where: AnswerWhereInput
    orderBy: AnswerOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Answer]!
  answersConnection(
    where: AnswerWhereInput
    orderBy: AnswerOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): AnswerConnection!
  answerVote(where: AnswerVoteWhereUniqueInput!): AnswerVote
  answerVotes(
    where: AnswerVoteWhereInput
    orderBy: AnswerVoteOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [AnswerVote]!
  answerVotesConnection(
    where: AnswerVoteWhereInput
    orderBy: AnswerVoteOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): AnswerVoteConnection!
  bookMark(where: BookMarkWhereUniqueInput!): BookMark
  bookMarks(
    where: BookMarkWhereInput
    orderBy: BookMarkOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [BookMark]!
  bookMarksConnection(
    where: BookMarkWhereInput
    orderBy: BookMarkOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): BookMarkConnection!
  businessIdea(where: BusinessIdeaWhereUniqueInput!): BusinessIdea
  businessIdeas(
    where: BusinessIdeaWhereInput
    orderBy: BusinessIdeaOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [BusinessIdea]!
  businessIdeasConnection(
    where: BusinessIdeaWhereInput
    orderBy: BusinessIdeaOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): BusinessIdeaConnection!
  businessIdeaVote(where: BusinessIdeaVoteWhereUniqueInput!): BusinessIdeaVote
  businessIdeaVotes(
    where: BusinessIdeaVoteWhereInput
    orderBy: BusinessIdeaVoteOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [BusinessIdeaVote]!
  businessIdeaVotesConnection(
    where: BusinessIdeaVoteWhereInput
    orderBy: BusinessIdeaVoteOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): BusinessIdeaVoteConnection!
  mastery(where: MasteryWhereUniqueInput!): Mastery
  masteries(
    where: MasteryWhereInput
    orderBy: MasteryOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Mastery]!
  masteriesConnection(
    where: MasteryWhereInput
    orderBy: MasteryOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): MasteryConnection!
  question(where: QuestionWhereUniqueInput!): Question
  questions(
    where: QuestionWhereInput
    orderBy: QuestionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Question]!
  questionsConnection(
    where: QuestionWhereInput
    orderBy: QuestionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): QuestionConnection!
  questionView(where: QuestionViewWhereUniqueInput!): QuestionView
  questionViews(
    where: QuestionViewWhereInput
    orderBy: QuestionViewOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [QuestionView]!
  questionViewsConnection(
    where: QuestionViewWhereInput
    orderBy: QuestionViewOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): QuestionViewConnection!
  questionVote(where: QuestionVoteWhereUniqueInput!): QuestionVote
  questionVotes(
    where: QuestionVoteWhereInput
    orderBy: QuestionVoteOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [QuestionVote]!
  questionVotesConnection(
    where: QuestionVoteWhereInput
    orderBy: QuestionVoteOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): QuestionVoteConnection!
  tag(where: TagWhereUniqueInput!): Tag
  tags(
    where: TagWhereInput
    orderBy: TagOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Tag]!
  tagsConnection(
    where: TagWhereInput
    orderBy: TagOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): TagConnection!
  user(where: UserWhereUniqueInput!): User
  users(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User]!
  usersConnection(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): UserConnection!
  node(id: ID!): Node
}

type Question {
  id: ID!
  tags(
    where: TagWhereInput
    orderBy: TagOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Tag!]
  title: String!
  description: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  askedBy(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User!]
  approval: Boolean
  answers(
    where: AnswerWhereInput
    orderBy: AnswerOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Answer!]
  questionVote(
    where: QuestionVoteWhereInput
    orderBy: QuestionVoteOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [QuestionVote!]
  bookMark(
    where: BookMarkWhereInput
    orderBy: BookMarkOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [BookMark!]
  searchTermFoundIn: String
}

type QuestionConnection {
  pageInfo: PageInfo!
  edges: [QuestionEdge]!
  aggregate: AggregateQuestion!
}

input QuestionCreateInput {
  id: ID
  tags: TagCreateManyInput
  title: String!
  description: String!
  askedBy: UserCreateManyWithoutMyQuestionsInput
  approval: Boolean
  answers: AnswerCreateManyWithoutAnsweredToInput
  questionVote: QuestionVoteCreateManyWithoutVotedQuestionInput
  bookMark: BookMarkCreateManyWithoutQuestionsInput
  searchTermFoundIn: String
}

input QuestionCreateManyWithoutAnswersInput {
  create: [QuestionCreateWithoutAnswersInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutAskedByInput {
  create: [QuestionCreateWithoutAskedByInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutBookMarkInput {
  create: [QuestionCreateWithoutBookMarkInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateOneInput {
  create: QuestionCreateInput
  connect: QuestionWhereUniqueInput
}

input QuestionCreateOneWithoutQuestionVoteInput {
  create: QuestionCreateWithoutQuestionVoteInput
  connect: QuestionWhereUniqueInput
}

input QuestionCreateWithoutAnswersInput {
  id: ID
  tags: TagCreateManyInput
  title: String!
  description: String!
  askedBy: UserCreateManyWithoutMyQuestionsInput
  approval: Boolean
  questionVote: QuestionVoteCreateManyWithoutVotedQuestionInput
  bookMark: BookMarkCreateManyWithoutQuestionsInput
  searchTermFoundIn: String
}

input QuestionCreateWithoutAskedByInput {
  id: ID
  tags: TagCreateManyInput
  title: String!
  description: String!
  approval: Boolean
  answers: AnswerCreateManyWithoutAnsweredToInput
  questionVote: QuestionVoteCreateManyWithoutVotedQuestionInput
  bookMark: BookMarkCreateManyWithoutQuestionsInput
  searchTermFoundIn: String
}

input QuestionCreateWithoutBookMarkInput {
  id: ID
  tags: TagCreateManyInput
  title: String!
  description: String!
  askedBy: UserCreateManyWithoutMyQuestionsInput
  approval: Boolean
  answers: AnswerCreateManyWithoutAnsweredToInput
  questionVote: QuestionVoteCreateManyWithoutVotedQuestionInput
  searchTermFoundIn: String
}

input QuestionCreateWithoutQuestionVoteInput {
  id: ID
  tags: TagCreateManyInput
  title: String!
  description: String!
  askedBy: UserCreateManyWithoutMyQuestionsInput
  approval: Boolean
  answers: AnswerCreateManyWithoutAnsweredToInput
  bookMark: BookMarkCreateManyWithoutQuestionsInput
  searchTermFoundIn: String
}

type QuestionEdge {
  node: Question!
  cursor: String!
}

enum QuestionOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  approval_ASC
  approval_DESC
  searchTermFoundIn_ASC
  searchTermFoundIn_DESC
}

type QuestionPreviousValues {
  id: ID!
  title: String!
  description: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  approval: Boolean
  searchTermFoundIn: String
}

input QuestionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  approval: Boolean
  approval_not: Boolean
  searchTermFoundIn: String
  searchTermFoundIn_not: String
  searchTermFoundIn_in: [String!]
  searchTermFoundIn_not_in: [String!]
  searchTermFoundIn_lt: String
  searchTermFoundIn_lte: String
  searchTermFoundIn_gt: String
  searchTermFoundIn_gte: String
  searchTermFoundIn_contains: String
  searchTermFoundIn_not_contains: String
  searchTermFoundIn_starts_with: String
  searchTermFoundIn_not_starts_with: String
  searchTermFoundIn_ends_with: String
  searchTermFoundIn_not_ends_with: String
  AND: [QuestionScalarWhereInput!]
  OR: [QuestionScalarWhereInput!]
  NOT: [QuestionScalarWhereInput!]
}

type QuestionSubscriptionPayload {
  mutation: MutationType!
  node: Question
  updatedFields: [String!]
  previousValues: QuestionPreviousValues
}

input QuestionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: QuestionWhereInput
  AND: [QuestionSubscriptionWhereInput!]
  OR: [QuestionSubscriptionWhereInput!]
  NOT: [QuestionSubscriptionWhereInput!]
}

input QuestionUpdateDataInput {
  tags: TagUpdateManyInput
  title: String
  description: String
  askedBy: UserUpdateManyWithoutMyQuestionsInput
  approval: Boolean
  answers: AnswerUpdateManyWithoutAnsweredToInput
  questionVote: QuestionVoteUpdateManyWithoutVotedQuestionInput
  bookMark: BookMarkUpdateManyWithoutQuestionsInput
  searchTermFoundIn: String
}

input QuestionUpdateInput {
  tags: TagUpdateManyInput
  title: String
  description: String
  askedBy: UserUpdateManyWithoutMyQuestionsInput
  approval: Boolean
  answers: AnswerUpdateManyWithoutAnsweredToInput
  questionVote: QuestionVoteUpdateManyWithoutVotedQuestionInput
  bookMark: BookMarkUpdateManyWithoutQuestionsInput
  searchTermFoundIn: String
}

input QuestionUpdateManyDataInput {
  title: String
  description: String
  approval: Boolean
  searchTermFoundIn: String
}

input QuestionUpdateManyMutationInput {
  title: String
  description: String
  approval: Boolean
  searchTermFoundIn: String
}

input QuestionUpdateManyWithoutAnswersInput {
  create: [QuestionCreateWithoutAnswersInput!]
  delete: [QuestionWhereUniqueInput!]
  connect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutAnswersInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutAnswersInput!]
  deleteMany: [QuestionScalarWhereInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
}

input QuestionUpdateManyWithoutAskedByInput {
  create: [QuestionCreateWithoutAskedByInput!]
  delete: [QuestionWhereUniqueInput!]
  connect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutAskedByInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutAskedByInput!]
  deleteMany: [QuestionScalarWhereInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
}

input QuestionUpdateManyWithoutBookMarkInput {
  create: [QuestionCreateWithoutBookMarkInput!]
  delete: [QuestionWhereUniqueInput!]
  connect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutBookMarkInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutBookMarkInput!]
  deleteMany: [QuestionScalarWhereInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
}

input QuestionUpdateManyWithWhereNestedInput {
  where: QuestionScalarWhereInput!
  data: QuestionUpdateManyDataInput!
}

input QuestionUpdateOneRequiredInput {
  create: QuestionCreateInput
  update: QuestionUpdateDataInput
  upsert: QuestionUpsertNestedInput
  connect: QuestionWhereUniqueInput
}

input QuestionUpdateOneRequiredWithoutQuestionVoteInput {
  create: QuestionCreateWithoutQuestionVoteInput
  update: QuestionUpdateWithoutQuestionVoteDataInput
  upsert: QuestionUpsertWithoutQuestionVoteInput
  connect: QuestionWhereUniqueInput
}

input QuestionUpdateWithoutAnswersDataInput {
  tags: TagUpdateManyInput
  title: String
  description: String
  askedBy: UserUpdateManyWithoutMyQuestionsInput
  approval: Boolean
  questionVote: QuestionVoteUpdateManyWithoutVotedQuestionInput
  bookMark: BookMarkUpdateManyWithoutQuestionsInput
  searchTermFoundIn: String
}

input QuestionUpdateWithoutAskedByDataInput {
  tags: TagUpdateManyInput
  title: String
  description: String
  approval: Boolean
  answers: AnswerUpdateManyWithoutAnsweredToInput
  questionVote: QuestionVoteUpdateManyWithoutVotedQuestionInput
  bookMark: BookMarkUpdateManyWithoutQuestionsInput
  searchTermFoundIn: String
}

input QuestionUpdateWithoutBookMarkDataInput {
  tags: TagUpdateManyInput
  title: String
  description: String
  askedBy: UserUpdateManyWithoutMyQuestionsInput
  approval: Boolean
  answers: AnswerUpdateManyWithoutAnsweredToInput
  questionVote: QuestionVoteUpdateManyWithoutVotedQuestionInput
  searchTermFoundIn: String
}

input QuestionUpdateWithoutQuestionVoteDataInput {
  tags: TagUpdateManyInput
  title: String
  description: String
  askedBy: UserUpdateManyWithoutMyQuestionsInput
  approval: Boolean
  answers: AnswerUpdateManyWithoutAnsweredToInput
  bookMark: BookMarkUpdateManyWithoutQuestionsInput
  searchTermFoundIn: String
}

input QuestionUpdateWithWhereUniqueWithoutAnswersInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutAnswersDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutAskedByInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutAskedByDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutBookMarkInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutBookMarkDataInput!
}

input QuestionUpsertNestedInput {
  update: QuestionUpdateDataInput!
  create: QuestionCreateInput!
}

input QuestionUpsertWithoutQuestionVoteInput {
  update: QuestionUpdateWithoutQuestionVoteDataInput!
  create: QuestionCreateWithoutQuestionVoteInput!
}

input QuestionUpsertWithWhereUniqueWithoutAnswersInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutAnswersDataInput!
  create: QuestionCreateWithoutAnswersInput!
}

input QuestionUpsertWithWhereUniqueWithoutAskedByInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutAskedByDataInput!
  create: QuestionCreateWithoutAskedByInput!
}

input QuestionUpsertWithWhereUniqueWithoutBookMarkInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutBookMarkDataInput!
  create: QuestionCreateWithoutBookMarkInput!
}

type QuestionView {
  id: ID!
  viewedBy: User!
  viewedQuestion: Question!
}

type QuestionViewConnection {
  pageInfo: PageInfo!
  edges: [QuestionViewEdge]!
  aggregate: AggregateQuestionView!
}

input QuestionViewCreateInput {
  id: ID
  viewedBy: UserCreateOneInput!
  viewedQuestion: QuestionCreateOneInput!
}

type QuestionViewEdge {
  node: QuestionView!
  cursor: String!
}

enum QuestionViewOrderByInput {
  id_ASC
  id_DESC
}

type QuestionViewPreviousValues {
  id: ID!
}

type QuestionViewSubscriptionPayload {
  mutation: MutationType!
  node: QuestionView
  updatedFields: [String!]
  previousValues: QuestionViewPreviousValues
}

input QuestionViewSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: QuestionViewWhereInput
  AND: [QuestionViewSubscriptionWhereInput!]
  OR: [QuestionViewSubscriptionWhereInput!]
  NOT: [QuestionViewSubscriptionWhereInput!]
}

input QuestionViewUpdateInput {
  viewedBy: UserUpdateOneRequiredInput
  viewedQuestion: QuestionUpdateOneRequiredInput
}

input QuestionViewWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  viewedBy: UserWhereInput
  viewedQuestion: QuestionWhereInput
  AND: [QuestionViewWhereInput!]
  OR: [QuestionViewWhereInput!]
  NOT: [QuestionViewWhereInput!]
}

input QuestionViewWhereUniqueInput {
  id: ID
}

type QuestionVote {
  id: ID!
  votedBy: User!
  votedQuestion: Question!
  vote: String
}

type QuestionVoteConnection {
  pageInfo: PageInfo!
  edges: [QuestionVoteEdge]!
  aggregate: AggregateQuestionVote!
}

input QuestionVoteCreateInput {
  id: ID
  votedBy: UserCreateOneInput!
  votedQuestion: QuestionCreateOneWithoutQuestionVoteInput!
  vote: String
}

input QuestionVoteCreateManyWithoutVotedQuestionInput {
  create: [QuestionVoteCreateWithoutVotedQuestionInput!]
  connect: [QuestionVoteWhereUniqueInput!]
}

input QuestionVoteCreateWithoutVotedQuestionInput {
  id: ID
  votedBy: UserCreateOneInput!
  vote: String
}

type QuestionVoteEdge {
  node: QuestionVote!
  cursor: String!
}

enum QuestionVoteOrderByInput {
  id_ASC
  id_DESC
  vote_ASC
  vote_DESC
}

type QuestionVotePreviousValues {
  id: ID!
  vote: String
}

input QuestionVoteScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  vote: String
  vote_not: String
  vote_in: [String!]
  vote_not_in: [String!]
  vote_lt: String
  vote_lte: String
  vote_gt: String
  vote_gte: String
  vote_contains: String
  vote_not_contains: String
  vote_starts_with: String
  vote_not_starts_with: String
  vote_ends_with: String
  vote_not_ends_with: String
  AND: [QuestionVoteScalarWhereInput!]
  OR: [QuestionVoteScalarWhereInput!]
  NOT: [QuestionVoteScalarWhereInput!]
}

type QuestionVoteSubscriptionPayload {
  mutation: MutationType!
  node: QuestionVote
  updatedFields: [String!]
  previousValues: QuestionVotePreviousValues
}

input QuestionVoteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: QuestionVoteWhereInput
  AND: [QuestionVoteSubscriptionWhereInput!]
  OR: [QuestionVoteSubscriptionWhereInput!]
  NOT: [QuestionVoteSubscriptionWhereInput!]
}

input QuestionVoteUpdateInput {
  votedBy: UserUpdateOneRequiredInput
  votedQuestion: QuestionUpdateOneRequiredWithoutQuestionVoteInput
  vote: String
}

input QuestionVoteUpdateManyDataInput {
  vote: String
}

input QuestionVoteUpdateManyMutationInput {
  vote: String
}

input QuestionVoteUpdateManyWithoutVotedQuestionInput {
  create: [QuestionVoteCreateWithoutVotedQuestionInput!]
  delete: [QuestionVoteWhereUniqueInput!]
  connect: [QuestionVoteWhereUniqueInput!]
  set: [QuestionVoteWhereUniqueInput!]
  disconnect: [QuestionVoteWhereUniqueInput!]
  update: [QuestionVoteUpdateWithWhereUniqueWithoutVotedQuestionInput!]
  upsert: [QuestionVoteUpsertWithWhereUniqueWithoutVotedQuestionInput!]
  deleteMany: [QuestionVoteScalarWhereInput!]
  updateMany: [QuestionVoteUpdateManyWithWhereNestedInput!]
}

input QuestionVoteUpdateManyWithWhereNestedInput {
  where: QuestionVoteScalarWhereInput!
  data: QuestionVoteUpdateManyDataInput!
}

input QuestionVoteUpdateWithoutVotedQuestionDataInput {
  votedBy: UserUpdateOneRequiredInput
  vote: String
}

input QuestionVoteUpdateWithWhereUniqueWithoutVotedQuestionInput {
  where: QuestionVoteWhereUniqueInput!
  data: QuestionVoteUpdateWithoutVotedQuestionDataInput!
}

input QuestionVoteUpsertWithWhereUniqueWithoutVotedQuestionInput {
  where: QuestionVoteWhereUniqueInput!
  update: QuestionVoteUpdateWithoutVotedQuestionDataInput!
  create: QuestionVoteCreateWithoutVotedQuestionInput!
}

input QuestionVoteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  votedBy: UserWhereInput
  votedQuestion: QuestionWhereInput
  vote: String
  vote_not: String
  vote_in: [String!]
  vote_not_in: [String!]
  vote_lt: String
  vote_lte: String
  vote_gt: String
  vote_gte: String
  vote_contains: String
  vote_not_contains: String
  vote_starts_with: String
  vote_not_starts_with: String
  vote_ends_with: String
  vote_not_ends_with: String
  AND: [QuestionVoteWhereInput!]
  OR: [QuestionVoteWhereInput!]
  NOT: [QuestionVoteWhereInput!]
}

input QuestionVoteWhereUniqueInput {
  id: ID
}

input QuestionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  askedBy_every: UserWhereInput
  askedBy_some: UserWhereInput
  askedBy_none: UserWhereInput
  approval: Boolean
  approval_not: Boolean
  answers_every: AnswerWhereInput
  answers_some: AnswerWhereInput
  answers_none: AnswerWhereInput
  questionVote_every: QuestionVoteWhereInput
  questionVote_some: QuestionVoteWhereInput
  questionVote_none: QuestionVoteWhereInput
  bookMark_every: BookMarkWhereInput
  bookMark_some: BookMarkWhereInput
  bookMark_none: BookMarkWhereInput
  searchTermFoundIn: String
  searchTermFoundIn_not: String
  searchTermFoundIn_in: [String!]
  searchTermFoundIn_not_in: [String!]
  searchTermFoundIn_lt: String
  searchTermFoundIn_lte: String
  searchTermFoundIn_gt: String
  searchTermFoundIn_gte: String
  searchTermFoundIn_contains: String
  searchTermFoundIn_not_contains: String
  searchTermFoundIn_starts_with: String
  searchTermFoundIn_not_starts_with: String
  searchTermFoundIn_ends_with: String
  searchTermFoundIn_not_ends_with: String
  AND: [QuestionWhereInput!]
  OR: [QuestionWhereInput!]
  NOT: [QuestionWhereInput!]
}

input QuestionWhereUniqueInput {
  id: ID
}

type Subscription {
  answer(where: AnswerSubscriptionWhereInput): AnswerSubscriptionPayload
  answerVote(
    where: AnswerVoteSubscriptionWhereInput
  ): AnswerVoteSubscriptionPayload
  bookMark(where: BookMarkSubscriptionWhereInput): BookMarkSubscriptionPayload
  businessIdea(
    where: BusinessIdeaSubscriptionWhereInput
  ): BusinessIdeaSubscriptionPayload
  businessIdeaVote(
    where: BusinessIdeaVoteSubscriptionWhereInput
  ): BusinessIdeaVoteSubscriptionPayload
  mastery(where: MasterySubscriptionWhereInput): MasterySubscriptionPayload
  question(where: QuestionSubscriptionWhereInput): QuestionSubscriptionPayload
  questionView(
    where: QuestionViewSubscriptionWhereInput
  ): QuestionViewSubscriptionPayload
  questionVote(
    where: QuestionVoteSubscriptionWhereInput
  ): QuestionVoteSubscriptionPayload
  tag(where: TagSubscriptionWhereInput): TagSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Tag {
  id: ID!
  name: String!
}

type TagConnection {
  pageInfo: PageInfo!
  edges: [TagEdge]!
  aggregate: AggregateTag!
}

input TagCreateInput {
  id: ID
  name: String!
}

input TagCreateManyInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type TagEdge {
  node: Tag!
  cursor: String!
}

enum TagOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type TagPreviousValues {
  id: ID!
  name: String!
}

input TagScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  NOT: [TagScalarWhereInput!]
}

type TagSubscriptionPayload {
  mutation: MutationType!
  node: Tag
  updatedFields: [String!]
  previousValues: TagPreviousValues
}

input TagSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TagWhereInput
  AND: [TagSubscriptionWhereInput!]
  OR: [TagSubscriptionWhereInput!]
  NOT: [TagSubscriptionWhereInput!]
}

input TagUpdateDataInput {
  name: String
}

input TagUpdateInput {
  name: String
}

input TagUpdateManyDataInput {
  name: String
}

input TagUpdateManyInput {
  create: [TagCreateInput!]
  update: [TagUpdateWithWhereUniqueNestedInput!]
  upsert: [TagUpsertWithWhereUniqueNestedInput!]
  delete: [TagWhereUniqueInput!]
  connect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  deleteMany: [TagScalarWhereInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
}

input TagUpdateManyMutationInput {
  name: String
}

input TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput!
  data: TagUpdateManyDataInput!
}

input TagUpdateWithWhereUniqueNestedInput {
  where: TagWhereUniqueInput!
  data: TagUpdateDataInput!
}

input TagUpsertWithWhereUniqueNestedInput {
  where: TagWhereUniqueInput!
  update: TagUpdateDataInput!
  create: TagCreateInput!
}

input TagWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
}

input TagWhereUniqueInput {
  id: ID
  name: String
}

type User {
  id: ID!
  name: String!
  email: String!
  display: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  image: String
  location: String
  about: String
  industry: String
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
  myQuestions(
    where: QuestionWhereInput
    orderBy: QuestionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Question!]
  myAnswers(
    where: AnswerWhereInput
    orderBy: AnswerOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Answer!]
  myBookMarks(
    where: BookMarkWhereInput
    orderBy: BookMarkOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [BookMark!]
  businessIdeas(
    where: BusinessIdeaWhereInput
    orderBy: BusinessIdeaOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [BusinessIdea!]
  tags(
    where: TagWhereInput
    orderBy: TagOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Tag!]
  master(
    where: MasteryWhereInput
    orderBy: MasteryOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Mastery!]
  points: Int
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  display: String!
  image: String
  location: String
  about: String
  industry: String
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  myQuestions: QuestionCreateManyWithoutAskedByInput
  myAnswers: AnswerCreateManyWithoutAnsweredByInput
  myBookMarks: BookMarkCreateManyWithoutMarkedByInput
  businessIdeas: BusinessIdeaCreateManyWithoutCreatedByInput
  tags: TagCreateManyInput
  master: MasteryCreateManyWithoutUserInput
  points: Int
}

input UserCreateManyWithoutMyQuestionsInput {
  create: [UserCreateWithoutMyQuestionsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutBusinessIdeasInput {
  create: UserCreateWithoutBusinessIdeasInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutMasterInput {
  create: UserCreateWithoutMasterInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutMyAnswersInput {
  create: UserCreateWithoutMyAnswersInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutMyBookMarksInput {
  create: UserCreateWithoutMyBookMarksInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

input UserCreateWithoutBusinessIdeasInput {
  id: ID
  name: String!
  email: String!
  display: String!
  image: String
  location: String
  about: String
  industry: String
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  myQuestions: QuestionCreateManyWithoutAskedByInput
  myAnswers: AnswerCreateManyWithoutAnsweredByInput
  myBookMarks: BookMarkCreateManyWithoutMarkedByInput
  tags: TagCreateManyInput
  master: MasteryCreateManyWithoutUserInput
  points: Int
}

input UserCreateWithoutMasterInput {
  id: ID
  name: String!
  email: String!
  display: String!
  image: String
  location: String
  about: String
  industry: String
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  myQuestions: QuestionCreateManyWithoutAskedByInput
  myAnswers: AnswerCreateManyWithoutAnsweredByInput
  myBookMarks: BookMarkCreateManyWithoutMarkedByInput
  businessIdeas: BusinessIdeaCreateManyWithoutCreatedByInput
  tags: TagCreateManyInput
  points: Int
}

input UserCreateWithoutMyAnswersInput {
  id: ID
  name: String!
  email: String!
  display: String!
  image: String
  location: String
  about: String
  industry: String
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  myQuestions: QuestionCreateManyWithoutAskedByInput
  myBookMarks: BookMarkCreateManyWithoutMarkedByInput
  businessIdeas: BusinessIdeaCreateManyWithoutCreatedByInput
  tags: TagCreateManyInput
  master: MasteryCreateManyWithoutUserInput
  points: Int
}

input UserCreateWithoutMyBookMarksInput {
  id: ID
  name: String!
  email: String!
  display: String!
  image: String
  location: String
  about: String
  industry: String
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  myQuestions: QuestionCreateManyWithoutAskedByInput
  myAnswers: AnswerCreateManyWithoutAnsweredByInput
  businessIdeas: BusinessIdeaCreateManyWithoutCreatedByInput
  tags: TagCreateManyInput
  master: MasteryCreateManyWithoutUserInput
  points: Int
}

input UserCreateWithoutMyQuestionsInput {
  id: ID
  name: String!
  email: String!
  display: String!
  image: String
  location: String
  about: String
  industry: String
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  myAnswers: AnswerCreateManyWithoutAnsweredByInput
  myBookMarks: BookMarkCreateManyWithoutMarkedByInput
  businessIdeas: BusinessIdeaCreateManyWithoutCreatedByInput
  tags: TagCreateManyInput
  master: MasteryCreateManyWithoutUserInput
  points: Int
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  display_ASC
  display_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  image_ASC
  image_DESC
  location_ASC
  location_DESC
  about_ASC
  about_DESC
  industry_ASC
  industry_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  points_ASC
  points_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  display: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  image: String
  location: String
  about: String
  industry: String
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
  points: Int
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  display: String
  display_not: String
  display_in: [String!]
  display_not_in: [String!]
  display_lt: String
  display_lte: String
  display_gt: String
  display_gte: String
  display_contains: String
  display_not_contains: String
  display_starts_with: String
  display_not_starts_with: String
  display_ends_with: String
  display_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  about: String
  about_not: String
  about_in: [String!]
  about_not_in: [String!]
  about_lt: String
  about_lte: String
  about_gt: String
  about_gte: String
  about_contains: String
  about_not_contains: String
  about_starts_with: String
  about_not_starts_with: String
  about_ends_with: String
  about_not_ends_with: String
  industry: String
  industry_not: String
  industry_in: [String!]
  industry_not_in: [String!]
  industry_lt: String
  industry_lte: String
  industry_gt: String
  industry_gte: String
  industry_contains: String
  industry_not_contains: String
  industry_starts_with: String
  industry_not_starts_with: String
  industry_ends_with: String
  industry_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  resetToken: String
  resetToken_not: String
  resetToken_in: [String!]
  resetToken_not_in: [String!]
  resetToken_lt: String
  resetToken_lte: String
  resetToken_gt: String
  resetToken_gte: String
  resetToken_contains: String
  resetToken_not_contains: String
  resetToken_starts_with: String
  resetToken_not_starts_with: String
  resetToken_ends_with: String
  resetToken_not_ends_with: String
  resetTokenExpiry: Float
  resetTokenExpiry_not: Float
  resetTokenExpiry_in: [Float!]
  resetTokenExpiry_not_in: [Float!]
  resetTokenExpiry_lt: Float
  resetTokenExpiry_lte: Float
  resetTokenExpiry_gt: Float
  resetTokenExpiry_gte: Float
  points: Int
  points_not: Int
  points_in: [Int!]
  points_not_in: [Int!]
  points_lt: Int
  points_lte: Int
  points_gt: Int
  points_gte: Int
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  name: String
  email: String
  display: String
  image: String
  location: String
  about: String
  industry: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  myQuestions: QuestionUpdateManyWithoutAskedByInput
  myAnswers: AnswerUpdateManyWithoutAnsweredByInput
  myBookMarks: BookMarkUpdateManyWithoutMarkedByInput
  businessIdeas: BusinessIdeaUpdateManyWithoutCreatedByInput
  tags: TagUpdateManyInput
  master: MasteryUpdateManyWithoutUserInput
  points: Int
}

input UserUpdateInput {
  name: String
  email: String
  display: String
  image: String
  location: String
  about: String
  industry: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  myQuestions: QuestionUpdateManyWithoutAskedByInput
  myAnswers: AnswerUpdateManyWithoutAnsweredByInput
  myBookMarks: BookMarkUpdateManyWithoutMarkedByInput
  businessIdeas: BusinessIdeaUpdateManyWithoutCreatedByInput
  tags: TagUpdateManyInput
  master: MasteryUpdateManyWithoutUserInput
  points: Int
}

input UserUpdateManyDataInput {
  name: String
  email: String
  display: String
  image: String
  location: String
  about: String
  industry: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  points: Int
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  display: String
  image: String
  location: String
  about: String
  industry: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  points: Int
}

input UserUpdateManyWithoutMyQuestionsInput {
  create: [UserCreateWithoutMyQuestionsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutMyQuestionsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutMyQuestionsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutBusinessIdeasInput {
  create: UserCreateWithoutBusinessIdeasInput
  update: UserUpdateWithoutBusinessIdeasDataInput
  upsert: UserUpsertWithoutBusinessIdeasInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutMasterInput {
  create: UserCreateWithoutMasterInput
  update: UserUpdateWithoutMasterDataInput
  upsert: UserUpsertWithoutMasterInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutMyAnswersInput {
  create: UserCreateWithoutMyAnswersInput
  update: UserUpdateWithoutMyAnswersDataInput
  upsert: UserUpsertWithoutMyAnswersInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutMyBookMarksInput {
  create: UserCreateWithoutMyBookMarksInput
  update: UserUpdateWithoutMyBookMarksDataInput
  upsert: UserUpsertWithoutMyBookMarksInput
  connect: UserWhereUniqueInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserUpdateWithoutBusinessIdeasDataInput {
  name: String
  email: String
  display: String
  image: String
  location: String
  about: String
  industry: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  myQuestions: QuestionUpdateManyWithoutAskedByInput
  myAnswers: AnswerUpdateManyWithoutAnsweredByInput
  myBookMarks: BookMarkUpdateManyWithoutMarkedByInput
  tags: TagUpdateManyInput
  master: MasteryUpdateManyWithoutUserInput
  points: Int
}

input UserUpdateWithoutMasterDataInput {
  name: String
  email: String
  display: String
  image: String
  location: String
  about: String
  industry: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  myQuestions: QuestionUpdateManyWithoutAskedByInput
  myAnswers: AnswerUpdateManyWithoutAnsweredByInput
  myBookMarks: BookMarkUpdateManyWithoutMarkedByInput
  businessIdeas: BusinessIdeaUpdateManyWithoutCreatedByInput
  tags: TagUpdateManyInput
  points: Int
}

input UserUpdateWithoutMyAnswersDataInput {
  name: String
  email: String
  display: String
  image: String
  location: String
  about: String
  industry: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  myQuestions: QuestionUpdateManyWithoutAskedByInput
  myBookMarks: BookMarkUpdateManyWithoutMarkedByInput
  businessIdeas: BusinessIdeaUpdateManyWithoutCreatedByInput
  tags: TagUpdateManyInput
  master: MasteryUpdateManyWithoutUserInput
  points: Int
}

input UserUpdateWithoutMyBookMarksDataInput {
  name: String
  email: String
  display: String
  image: String
  location: String
  about: String
  industry: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  myQuestions: QuestionUpdateManyWithoutAskedByInput
  myAnswers: AnswerUpdateManyWithoutAnsweredByInput
  businessIdeas: BusinessIdeaUpdateManyWithoutCreatedByInput
  tags: TagUpdateManyInput
  master: MasteryUpdateManyWithoutUserInput
  points: Int
}

input UserUpdateWithoutMyQuestionsDataInput {
  name: String
  email: String
  display: String
  image: String
  location: String
  about: String
  industry: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  myAnswers: AnswerUpdateManyWithoutAnsweredByInput
  myBookMarks: BookMarkUpdateManyWithoutMarkedByInput
  businessIdeas: BusinessIdeaUpdateManyWithoutCreatedByInput
  tags: TagUpdateManyInput
  master: MasteryUpdateManyWithoutUserInput
  points: Int
}

input UserUpdateWithWhereUniqueWithoutMyQuestionsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutMyQuestionsDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutBusinessIdeasInput {
  update: UserUpdateWithoutBusinessIdeasDataInput!
  create: UserCreateWithoutBusinessIdeasInput!
}

input UserUpsertWithoutMasterInput {
  update: UserUpdateWithoutMasterDataInput!
  create: UserCreateWithoutMasterInput!
}

input UserUpsertWithoutMyAnswersInput {
  update: UserUpdateWithoutMyAnswersDataInput!
  create: UserCreateWithoutMyAnswersInput!
}

input UserUpsertWithoutMyBookMarksInput {
  update: UserUpdateWithoutMyBookMarksDataInput!
  create: UserCreateWithoutMyBookMarksInput!
}

input UserUpsertWithWhereUniqueWithoutMyQuestionsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutMyQuestionsDataInput!
  create: UserCreateWithoutMyQuestionsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  display: String
  display_not: String
  display_in: [String!]
  display_not_in: [String!]
  display_lt: String
  display_lte: String
  display_gt: String
  display_gte: String
  display_contains: String
  display_not_contains: String
  display_starts_with: String
  display_not_starts_with: String
  display_ends_with: String
  display_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  about: String
  about_not: String
  about_in: [String!]
  about_not_in: [String!]
  about_lt: String
  about_lte: String
  about_gt: String
  about_gte: String
  about_contains: String
  about_not_contains: String
  about_starts_with: String
  about_not_starts_with: String
  about_ends_with: String
  about_not_ends_with: String
  industry: String
  industry_not: String
  industry_in: [String!]
  industry_not_in: [String!]
  industry_lt: String
  industry_lte: String
  industry_gt: String
  industry_gte: String
  industry_contains: String
  industry_not_contains: String
  industry_starts_with: String
  industry_not_starts_with: String
  industry_ends_with: String
  industry_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  resetToken: String
  resetToken_not: String
  resetToken_in: [String!]
  resetToken_not_in: [String!]
  resetToken_lt: String
  resetToken_lte: String
  resetToken_gt: String
  resetToken_gte: String
  resetToken_contains: String
  resetToken_not_contains: String
  resetToken_starts_with: String
  resetToken_not_starts_with: String
  resetToken_ends_with: String
  resetToken_not_ends_with: String
  resetTokenExpiry: Float
  resetTokenExpiry_not: Float
  resetTokenExpiry_in: [Float!]
  resetTokenExpiry_not_in: [Float!]
  resetTokenExpiry_lt: Float
  resetTokenExpiry_lte: Float
  resetTokenExpiry_gt: Float
  resetTokenExpiry_gte: Float
  myQuestions_every: QuestionWhereInput
  myQuestions_some: QuestionWhereInput
  myQuestions_none: QuestionWhereInput
  myAnswers_every: AnswerWhereInput
  myAnswers_some: AnswerWhereInput
  myAnswers_none: AnswerWhereInput
  myBookMarks_every: BookMarkWhereInput
  myBookMarks_some: BookMarkWhereInput
  myBookMarks_none: BookMarkWhereInput
  businessIdeas_every: BusinessIdeaWhereInput
  businessIdeas_some: BusinessIdeaWhereInput
  businessIdeas_none: BusinessIdeaWhereInput
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  master_every: MasteryWhereInput
  master_some: MasteryWhereInput
  master_none: MasteryWhereInput
  points: Int
  points_not: Int
  points_in: [Int!]
  points_not_in: [Int!]
  points_lt: Int
  points_lte: Int
  points_gt: Int
  points_gte: Int
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
  display: String
}
